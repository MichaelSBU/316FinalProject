{"ast":null,"code":"var _jsxFileName = \"/Users/mikeybudney/Desktop/CSE316FINALPROJECT/client/src/store/index.js\",\n  _s = $RefreshSig$();\nimport { createContext, useContext, useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport jsTPS from '../common/jsTPS';\nimport api from './store-request-api';\nimport CreateSong_Transaction from '../transactions/CreateSong_Transaction';\nimport MoveSong_Transaction from '../transactions/MoveSong_Transaction';\nimport RemoveSong_Transaction from '../transactions/RemoveSong_Transaction';\nimport UpdateSong_Transaction from '../transactions/UpdateSong_Transaction';\nimport AuthContext from '../auth';\n//import YouTubePlayerExample from '../YouTubePlaylisterReact'\n\n/*\n    This is our global data store. Note that it uses the Flux design pattern,\n    which makes use of things like actions and reducers. \n    \n    @author McKilla Gorilla\n*/\n\n// THIS IS THE CONTEXT WE'LL USE TO SHARE OUR STORE\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const GlobalStoreContext = /*#__PURE__*/createContext({});\nconsole.log(\"create GlobalStoreContext\");\n\n// THESE ARE ALL THE TYPES OF UPDATES TO OUR GLOBAL\n// DATA STORE STATE THAT CAN BE PROCESSED\nexport const GlobalStoreActionType = {\n  CHANGE_LIST_NAME: \"CHANGE_LIST_NAME\",\n  CLOSE_CURRENT_LIST: \"CLOSE_CURRENT_LIST\",\n  CREATE_NEW_LIST: \"CREATE_NEW_LIST\",\n  LOAD_ID_NAME_PAIRS: \"LOAD_ID_NAME_PAIRS\",\n  MARK_LIST_FOR_DELETION: \"MARK_LIST_FOR_DELETION\",\n  SET_CURRENT_LIST: \"SET_CURRENT_LIST\",\n  SET_PLAYING_LIST: \"SET_PLAYING_LIST\",\n  SET_LIST_NAME_EDIT_ACTIVE: \"SET_LIST_NAME_EDIT_ACTIVE\",\n  EDIT_SONG: \"EDIT_SONG\",\n  REMOVE_SONG: \"REMOVE_SONG\",\n  HIDE_MODALS: \"HIDE_MODALS\",\n  CHANGE_SORT_TYPE: \"CHANGE_SORT_TYPE\",\n  GO_TO_MY_PLAYLISTS: \"GO_TO_MY_PLAYLISTS\"\n};\n\n// WE'LL NEED THIS TO PROCESS TRANSACTIONS\nconst tps = new jsTPS();\nconst CurrentModal = {\n  NONE: \"NONE\",\n  DELETE_LIST: \"DELETE_LIST\",\n  EDIT_SONG: \"EDIT_SONG\",\n  REMOVE_SONG: \"REMOVE_SONG\",\n  ERROR: \"ERROR\"\n};\n\n// WITH THIS WE'RE MAKING OUR GLOBAL DATA STORE\n// AVAILABLE TO THE REST OF THE APPLICATION\nfunction GlobalStoreContextProvider(props) {\n  _s();\n  // THESE ARE ALL THE THINGS OUR DATA STORE WILL MANAGE\n  const [store, setStore] = useState({\n    currentModal: CurrentModal.NONE,\n    idNamePairs: [],\n    currentList: null,\n    playingList: null,\n    listBeingPlayed: null,\n    currentSongIndex: -1,\n    currentSong: null,\n    newListCounter: 0,\n    listNameActive: false,\n    listIdMarkedForDeletion: null,\n    listMarkedForDeletion: null,\n    sortBy: null,\n    searchBy: null\n  });\n  const history = useHistory();\n  console.log(\"inside useGlobalStore\");\n\n  // SINCE WE'VE WRAPPED THE STORE IN THE AUTH CONTEXT WE CAN ACCESS THE USER HERE\n  const {\n    auth\n  } = useContext(AuthContext);\n  console.log(\"auth: \" + auth);\n\n  // HERE'S THE DATA STORE'S REDUCER, IT MUST\n  // HANDLE EVERY TYPE OF STATE CHANGE\n  const storeReducer = action => {\n    const {\n      type,\n      payload\n    } = action;\n    switch (type) {\n      // CHANGE SORT TYPE\n      case GlobalStoreActionType.CHANGE_SORT_TYPE:\n        {\n          return setStore({\n            currentModal: CurrentModal.NONE,\n            idNamePairs: store.idNamePairs,\n            currentList: store.currentList,\n            playingList: store.playingList,\n            currentSongIndex: store.currentSongIndex,\n            currentSong: store.currentSong,\n            newListCounter: store.newListCounter,\n            listNameActive: store.newListName,\n            listIdMarkedForDeletion: store.listIdMarkedForDeletion,\n            listMarkedForDeletion: store.listMarkedForDeletion,\n            sortBy: payload,\n            searchBy: store.searchBy\n          });\n        }\n      // LIST UPDATE OF ITS NAME\n      case GlobalStoreActionType.CHANGE_LIST_NAME:\n        {\n          console.log(\"SORT BY\" + store.sortBy);\n          return setStore({\n            currentModal: CurrentModal.NONE,\n            idNamePairs: payload.idNamePairs,\n            currentList: payload.playlist,\n            playingList: store.playingList,\n            currentSongIndex: -1,\n            currentSong: null,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            listIdMarkedForDeletion: null,\n            listMarkedForDeletion: null,\n            sortBy: store.sortBy,\n            searchBy: store.searchBy\n          });\n        }\n      // STOP EDITING THE CURRENT LIST\n      case GlobalStoreActionType.CLOSE_CURRENT_LIST:\n        {\n          return setStore({\n            currentModal: CurrentModal.NONE,\n            idNamePairs: store.idNamePairs,\n            currentList: null,\n            playingList: store.playingList,\n            currentSongIndex: -1,\n            currentSong: null,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            listIdMarkedForDeletion: null,\n            listMarkedForDeletion: null,\n            sortBy: store.sortBy,\n            searchBy: store.searchBy\n          });\n        }\n      // CREATE A NEW LIST\n      case GlobalStoreActionType.CREATE_NEW_LIST:\n        {\n          return setStore({\n            currentModal: CurrentModal.NONE,\n            idNamePairs: store.idNamePairs,\n            currentList: store.currentList,\n            playingList: store.playingList,\n            currentSongIndex: -1,\n            currentSong: null,\n            newListCounter: store.newListCounter + 1,\n            listNameActive: false,\n            listIdMarkedForDeletion: null,\n            listMarkedForDeletion: null,\n            sortBy: store.sortBy,\n            searchBy: null\n          });\n        }\n      // GET ALL THE LISTS SO WE CAN PRESENT THEM\n      case GlobalStoreActionType.LOAD_ID_NAME_PAIRS:\n        {\n          console.log(\"LOAD_ID_NAME_PAIRS setStore is being done!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\");\n          return setStore({\n            currentModal: CurrentModal.NONE,\n            idNamePairs: payload.playlists,\n            currentList: null,\n            playingList: store.playingList,\n            currentSongIndex: -1,\n            currentSong: null,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            listIdMarkedForDeletion: null,\n            listMarkedForDeletion: null,\n            sortBy: payload.sortType,\n            searchBy: store.searchBy\n          });\n        }\n      // PREPARE TO DELETE A LIST\n      case GlobalStoreActionType.MARK_LIST_FOR_DELETION:\n        {\n          return setStore({\n            currentModal: CurrentModal.DELETE_LIST,\n            idNamePairs: store.idNamePairs,\n            currentList: null,\n            playingList: store.playingList,\n            currentSongIndex: -1,\n            currentSong: null,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            listIdMarkedForDeletion: payload.id,\n            listMarkedForDeletion: payload.playlist,\n            sortBy: store.sortBy,\n            searchBy: store.searchBy\n          });\n        }\n      // UPDATE CURRENT LIST\n      case GlobalStoreActionType.SET_CURRENT_LIST:\n        {\n          return setStore({\n            currentModal: CurrentModal.NONE,\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            playingList: store.playingList,\n            currentSongIndex: -1,\n            currentSong: null,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            listIdMarkedForDeletion: null,\n            listMarkedForDeletion: null,\n            sortBy: store.sortBy,\n            searchBy: store.searchBy\n          });\n        }\n      // UPDATE PLAYING LIST\n      case GlobalStoreActionType.SET_PLAYING_LIST:\n        {\n          console.log(\"SET_PLAYING_LIST setStore is being done!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\");\n          return setStore({\n            currentModal: CurrentModal.NONE,\n            idNamePairs: payload.playlists,\n            currentList: store.currentList,\n            playingList: payload.playingList,\n            currentSongIndex: store.currentSongIndex,\n            currentSong: store.currentSong,\n            newListCounter: store.newListCounter,\n            listNameActive: store.newListName,\n            listIdMarkedForDeletion: store.listIdMarkedForDeletion,\n            listMarkedForDeletion: store.listMarkedForDeletion,\n            sortBy: store.sortBy,\n            searchBy: store.searchBy\n          });\n        }\n      // START EDITING A LIST NAME\n      case GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE:\n        {\n          return setStore({\n            currentModal: CurrentModal.NONE,\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            playingList: store.playingList,\n            currentSongIndex: -1,\n            currentSong: null,\n            newListCounter: store.newListCounter,\n            listNameActive: true,\n            listIdMarkedForDeletion: null,\n            listMarkedForDeletion: null,\n            sortBy: store.sortBy,\n            searchBy: null\n          });\n        }\n      // \n      case GlobalStoreActionType.EDIT_SONG:\n        {\n          return setStore({\n            currentModal: CurrentModal.EDIT_SONG,\n            idNamePairs: store.idNamePairs,\n            currentList: store.currentList,\n            playingList: store.playingList,\n            currentSongIndex: payload.currentSongIndex,\n            currentSong: payload.currentSong,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            listIdMarkedForDeletion: null,\n            listMarkedForDeletion: null,\n            sortBy: store.sortBy,\n            searchBy: null\n          });\n        }\n      case GlobalStoreActionType.REMOVE_SONG:\n        {\n          return setStore({\n            currentModal: CurrentModal.REMOVE_SONG,\n            idNamePairs: store.idNamePairs,\n            currentList: store.currentList,\n            playingList: store.playingList,\n            currentSongIndex: payload.currentSongIndex,\n            currentSong: payload.currentSong,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            listIdMarkedForDeletion: null,\n            listMarkedForDeletion: null,\n            sortBy: store.sortBy,\n            searchBy: null\n          });\n        }\n      case GlobalStoreActionType.HIDE_MODALS:\n        {\n          return setStore({\n            currentModal: CurrentModal.NONE,\n            idNamePairs: store.idNamePairs,\n            currentList: store.currentList,\n            playingList: store.playingList,\n            currentSongIndex: -1,\n            currentSong: null,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            listIdMarkedForDeletion: null,\n            listMarkedForDeletion: null,\n            sortBy: store.sortBy,\n            searchBy: store.searchBy\n          });\n        }\n      case GlobalStoreActionType.GO_TO_MY_PLAYLISTS:\n        {\n          console.log(\"going to your playlists  going to your playlists  going to your playlists  going to your playlists\");\n          return setStore({\n            currentModal: CurrentModal.NONE,\n            idNamePairs: payload.playlists,\n            currentList: null,\n            playingList: store.playingList,\n            currentSongIndex: store.currentSongIndex,\n            currentSong: store.currentSong,\n            newListCounter: store.newListCounter,\n            listNameActive: store.newListName,\n            listIdMarkedForDeletion: store.listIdMarkedForDeletion,\n            listMarkedForDeletion: store.listMarkedForDeletion,\n            sortBy: null,\n            searchBy: null\n          });\n        }\n      default:\n        return store;\n    }\n  };\n  store.tryAcessingOtherAccountPlaylist = function () {\n    let id = \"635f203d2e072037af2e6284\";\n    async function asyncSetCurrentList(id) {\n      let response = await api.getPlaylistById(id);\n      if (response.data.success) {\n        let playlist = response.data.playlist;\n        storeReducer({\n          type: GlobalStoreActionType.SET_CURRENT_LIST,\n          payload: playlist\n        });\n      }\n    }\n    asyncSetCurrentList(id);\n    history.push(\"/playlist/635f203d2e072037af2e6284\");\n  };\n  store.addComment = function (comment) {\n    let list = store.playingList;\n    list.comments.push({\n      postedBy: auth.user.firstName + ' ' + auth.user.lastName,\n      comment: comment\n    });\n    // NOW MAKE IT OFFICIAL\n    store.updatePlayingList();\n  };\n\n  // THESE ARE THE FUNCTIONS THAT WILL UPDATE OUR STORE AND\n  // DRIVE THE STATE OF THE APPLICATION. WE'LL CALL THESE IN \n  // RESPONSE TO EVENTS INSIDE OUR COMPONENTS.\n\n  // THIS FUNCTION PROCESSES CHANGING A LIST NAME\n  store.changeListName = function (id, newName) {\n    // GET THE LIST\n    async function asyncChangeListName(id) {\n      let response = await api.getPlaylistById(id);\n      if (response.data.success) {\n        let playlist = response.data.playlist;\n        playlist.name = newName;\n        async function updateList(playlist) {\n          response = await api.updatePlaylistById(playlist._id, playlist);\n          if (response.data.success) {\n            async function getListPairs(playlist) {\n              response = await api.getPlaylistPairs();\n              if (response.data.success) {\n                let pairsArray = response.data.idNamePairs;\n                storeReducer({\n                  type: GlobalStoreActionType.CHANGE_LIST_NAME,\n                  payload: {\n                    idNamePairs: pairsArray,\n                    playlist: playlist\n                  }\n                });\n                store.loadIdNamePairs();\n              }\n            }\n            getListPairs(playlist);\n          }\n        }\n        updateList(playlist);\n      }\n    }\n    asyncChangeListName(id);\n  };\n\n  // THIS FUNCTION PROCESSES CLOSING THE CURRENTLY LOADED LIST\n  store.closeCurrentList = function () {\n    storeReducer({\n      type: GlobalStoreActionType.CLOSE_CURRENT_LIST,\n      payload: {}\n    });\n    tps.clearAllTransactions();\n    history.push(\"/\");\n  };\n\n  // THIS FUNCTION CREATES A NEW LIST\n  store.createNewList = async function () {\n    let newListName = \"Untitled\" + store.newListCounter;\n    const response = await api.createPlaylist(newListName, auth.user.email, auth.user.firstName + ' ' + auth.user.lastName, [], 0, 0, [], \"no\", 0);\n    console.log(\"createNewList response: \" + response);\n    if (response.status === 201) {\n      tps.clearAllTransactions();\n      let newList = response.data.playlist;\n      storeReducer({\n        type: GlobalStoreActionType.CREATE_NEW_LIST\n      });\n      history.push(\"/\");\n      store.loadIdNamePairs();\n    } else {\n      console.log(\"API FAILED TO CREATE A NEW LIST\");\n    }\n  };\n  store.sortListsBy = function (sortBy) {\n    storeReducer({\n      type: GlobalStoreActionType.CHANGE_SORT_TYPE,\n      payload: sortBy\n    });\n    console.log(sortBy);\n    console.log(store);\n    store.loadIdNamePairs(sortBy);\n    console.log(store.sortBy);\n  };\n  store.myPlaylists = function () {\n    async function asyncLoadIdNamePairs() {\n      const response = await api.getPlaylistPairs();\n      if (response.data.success) {\n        let pairsArray = response.data.idNamePairs;\n        console.log(pairsArray);\n        storeReducer({\n          type: GlobalStoreActionType.GO_TO_MY_PLAYLISTS,\n          payload: {\n            playlists: pairsArray\n          }\n        });\n      } else {\n        console.log(\"API FAILED TO GET THE LIST PAIRS\");\n      }\n    }\n    asyncLoadIdNamePairs();\n  };\n\n  // THIS FUNCTION LOADS ALL THE ID, NAME PAIRS SO WE CAN LIST ALL THE LISTS\n  store.loadIdNamePairs = function (sortBy) {\n    async function asyncLoadIdNamePairs() {\n      const response = await api.getPlaylistPairs();\n      if (response.data.success) {\n        let pairsArray = response.data.idNamePairs;\n        console.log(pairsArray);\n        if (store.sortBy !== null) {\n          pairsArray.sort(store.sortBy);\n        }\n        if (sortBy !== undefined && sortBy !== null) {\n          pairsArray.sort(sortBy);\n        }\n        console.log(pairsArray);\n        storeReducer({\n          type: GlobalStoreActionType.LOAD_ID_NAME_PAIRS,\n          payload: {\n            playlists: pairsArray,\n            sortType: sortBy\n          }\n        });\n      } else {\n        console.log(\"API FAILED TO GET THE LIST PAIRS\");\n      }\n    }\n    asyncLoadIdNamePairs();\n  };\n  store.setPlayingList = function (id) {\n    async function asyncSetPlayingList(id) {\n      let response = await api.getPlaylistById(id);\n      if (response.data.success) {\n        let playlist = response.data.playlist;\n        if (playlist.published !== \"no\") {\n          playlist.listens++;\n          response = await api.updatePlaylistById(playlist._id, playlist);\n          if (response.data.success) {\n            response = await api.getPlaylistPairs();\n            if (response.data.success) {\n              let pairsArray = response.data.idNamePairs;\n              console.log(\"PAIRS ARRAY:  : : : :: : : : ::  :: : :: : : : ::  : : :: : : :: : : ::  \" + pairsArray);\n              storeReducer({\n                type: GlobalStoreActionType.SET_PLAYING_LIST,\n                payload: {\n                  playingList: playlist,\n                  playlists: pairsArray\n                }\n              });\n              console.log(store.idNamePairs);\n            }\n          }\n        } else {\n          storeReducer({\n            type: GlobalStoreActionType.SET_PLAYING_LIST,\n            payload: {\n              playingList: playlist,\n              playlists: store.idNamePairs\n            }\n          });\n        }\n      }\n    }\n    asyncSetPlayingList(id);\n  };\n\n  // THE FOLLOWING 5 FUNCTIONS ARE FOR COORDINATING THE DELETION\n  // OF A LIST, WHICH INCLUDES USING A VERIFICATION MODAL. THE\n  // FUNCTIONS ARE markListForDeletion, deleteList, deleteMarkedList,\n  // showDeleteListModal, and hideDeleteListModal\n  store.markListForDeletion = function (id) {\n    async function getListToDelete(id) {\n      let response = await api.getPlaylistById(id);\n      if (response.data.success) {\n        let playlist = response.data.playlist;\n        storeReducer({\n          type: GlobalStoreActionType.MARK_LIST_FOR_DELETION,\n          payload: {\n            id: id,\n            playlist: playlist\n          }\n        });\n      }\n    }\n    getListToDelete(id);\n  };\n  store.deleteList = function (id) {\n    async function processDelete(id) {\n      let response = await api.deletePlaylistById(id);\n      store.loadIdNamePairs();\n      if (response.data.success) {\n        history.push(\"/\");\n      }\n    }\n    processDelete(id);\n  };\n  store.deleteMarkedList = function () {\n    store.deleteList(store.listIdMarkedForDeletion);\n    store.hideModals();\n  };\n  store.publishPlaylist = function (id) {\n    async function pub(id) {\n      let response = await api.getPlaylistById(id);\n      if (response.data.success) {\n        let playlist = response.data.playlist;\n        playlist.published = new Date();\n        response = await api.updatePlaylistById(playlist._id, playlist);\n        store.loadIdNamePairs(store.sortBy);\n      }\n    }\n    pub(id);\n  };\n  store.duplicatePlaylist = function (id) {\n    async function dup(id) {\n      let response = await api.getPlaylistById(id);\n      if (response.data.success) {\n        let playlist = response.data.playlist;\n        response = await api.createPlaylist(\"Copy of \" + playlist.name, auth.user.email, auth.user.firstName + ' ' + auth.user.lastName, playlist.songs, 0, 0, [], \"no\", 0);\n        console.log(\"createNewList response: \" + response);\n        if (response.status === 201) {\n          history.push(\"/\");\n          store.loadIdNamePairs();\n        }\n      }\n    }\n    dup(id);\n  };\n\n  // THIS FUNCTION SHOWS THE MODAL FOR PROMPTING THE USER\n  // TO SEE IF THEY REALLY WANT TO DELETE THE LIST\n\n  store.showEditSongModal = (songIndex, songToEdit) => {\n    storeReducer({\n      type: GlobalStoreActionType.EDIT_SONG,\n      payload: {\n        currentSongIndex: songIndex,\n        currentSong: songToEdit\n      }\n    });\n  };\n  store.showRemoveSongModal = (songIndex, songToRemove) => {\n    storeReducer({\n      type: GlobalStoreActionType.REMOVE_SONG,\n      payload: {\n        currentSongIndex: songIndex,\n        currentSong: songToRemove\n      }\n    });\n  };\n  store.hideModals = () => {\n    auth.errorMessage = null;\n    storeReducer({\n      type: GlobalStoreActionType.HIDE_MODALS,\n      payload: {}\n    });\n  };\n  store.isDeleteListModalOpen = () => {\n    return store.currentModal === CurrentModal.DELETE_LIST;\n  };\n  store.isEditSongModalOpen = () => {\n    return store.currentModal === CurrentModal.EDIT_SONG;\n  };\n  store.isRemoveSongModalOpen = () => {\n    return store.currentModal === CurrentModal.REMOVE_SONG;\n  };\n  store.isErrorModalOpen = () => {\n    return store.currentModal === CurrentModal.ERROR;\n  };\n  store.like = function (id, bool) {\n    async function asyncGetList(id) {\n      let response = await api.getPlaylistById(id);\n      if (response.data.success) {\n        let playlist = response.data.playlist;\n        if (bool) {\n          playlist.likes++;\n        } else {\n          playlist.dislikes++;\n        }\n        response = await api.updatePlaylistById(playlist._id, playlist);\n        if (response.data.success) {\n          console.log(\"liked\");\n          store.loadIdNamePairs(store.loadIdNamePairs(store.sortBy));\n        }\n      }\n    }\n    asyncGetList(id);\n  };\n\n  // THE FOLLOWING 8 FUNCTIONS ARE FOR COORDINATING THE UPDATING\n  // OF A LIST, WHICH INCLUDES DEALING WITH THE TRANSACTION STACK. THE\n  // FUNCTIONS ARE setCurrentList, addMoveItemTransaction, addUpdateItemTransaction,\n  // moveItem, updateItem, updateCurrentList, undo, and redo\n  store.setCurrentList = function (id) {\n    async function asyncSetCurrentList(id) {\n      let response = await api.getPlaylistById(id);\n      if (response.data.success) {\n        let playlist = response.data.playlist;\n        response = await api.updatePlaylistById(playlist._id, playlist);\n        if (response.data.success) {\n          storeReducer({\n            type: GlobalStoreActionType.SET_CURRENT_LIST,\n            payload: playlist\n          });\n        }\n      }\n    }\n    asyncSetCurrentList(id);\n  };\n  store.getPlaylistSize = function () {\n    return store.currentList.songs.length;\n  };\n  store.addNewSong = function () {\n    let index = this.getPlaylistSize();\n    this.addCreateSongTransaction(index, \"Untitled\", \"?\", \"dQw4w9WgXcQ\");\n  };\n  // THIS FUNCTION CREATES A NEW SONG IN THE CURRENT LIST\n  // USING THE PROVIDED DATA AND PUTS THIS SONG AT INDEX\n  store.createSong = function (index, song) {\n    let list = store.currentList;\n    list.songs.splice(index, 0, song);\n    // NOW MAKE IT OFFICIAL\n    store.updateCurrentList();\n  };\n  // THIS FUNCTION MOVES A SONG IN THE CURRENT LIST FROM\n  // start TO end AND ADJUSTS ALL OTHER ITEMS ACCORDINGLY\n  store.moveSong = function (start, end) {\n    let list = store.currentList;\n\n    // WE NEED TO UPDATE THE STATE FOR THE APP\n    if (start < end) {\n      let temp = list.songs[start];\n      for (let i = start; i < end; i++) {\n        list.songs[i] = list.songs[i + 1];\n      }\n      list.songs[end] = temp;\n    } else if (start > end) {\n      let temp = list.songs[start];\n      for (let i = start; i > end; i--) {\n        list.songs[i] = list.songs[i - 1];\n      }\n      list.songs[end] = temp;\n    }\n\n    // NOW MAKE IT OFFICIAL\n    store.updateCurrentList();\n  };\n  // THIS FUNCTION REMOVES THE SONG AT THE index LOCATION\n  // FROM THE CURRENT LIST\n  store.removeSong = function (index) {\n    let list = store.currentList;\n    list.songs.splice(index, 1);\n\n    // NOW MAKE IT OFFICIAL\n    store.updateCurrentList();\n  };\n  // THIS FUNCTION UPDATES THE TEXT IN THE ITEM AT index TO text\n  store.updateSong = function (index, songData) {\n    let list = store.currentList;\n    let song = list.songs[index];\n    song.title = songData.title;\n    song.artist = songData.artist;\n    song.youTubeId = songData.youTubeId;\n\n    // NOW MAKE IT OFFICIAL\n    store.updateCurrentList();\n  };\n  store.addNewSong = () => {\n    let playlistSize = store.getPlaylistSize();\n    store.addCreateSongTransaction(playlistSize, \"Untitled\", \"?\", \"dQw4w9WgXcQ\");\n  };\n  // THIS FUNCDTION ADDS A CreateSong_Transaction TO THE TRANSACTION STACK\n  store.addCreateSongTransaction = (index, title, artist, youTubeId) => {\n    // ADD A SONG ITEM AND ITS NUMBER\n    let song = {\n      title: title,\n      artist: artist,\n      youTubeId: youTubeId\n    };\n    let transaction = new CreateSong_Transaction(store, index, song);\n    tps.addTransaction(transaction);\n  };\n  store.addMoveSongTransaction = function (start, end) {\n    let transaction = new MoveSong_Transaction(store, start, end);\n    tps.addTransaction(transaction);\n  };\n  // THIS FUNCTION ADDS A RemoveSong_Transaction TO THE TRANSACTION STACK\n  store.addRemoveSongTransaction = () => {\n    let index = store.currentSongIndex;\n    let song = store.currentList.songs[index];\n    let transaction = new RemoveSong_Transaction(store, index, song);\n    tps.addTransaction(transaction);\n  };\n  store.addUpdateSongTransaction = function (index, newSongData) {\n    let song = store.currentList.songs[index];\n    let oldSongData = {\n      title: song.title,\n      artist: song.artist,\n      youTubeId: song.youTubeId\n    };\n    let transaction = new UpdateSong_Transaction(this, index, oldSongData, newSongData);\n    tps.addTransaction(transaction);\n  };\n  store.updateCurrentList = function () {\n    async function asyncUpdateCurrentList() {\n      const response = await api.updatePlaylistById(store.currentList._id, store.currentList);\n      if (response.data.success) {\n        storeReducer({\n          type: GlobalStoreActionType.SET_CURRENT_LIST,\n          payload: store.currentList\n        });\n      }\n    }\n    asyncUpdateCurrentList();\n  };\n  store.updatePlayingList = function () {\n    async function asyncUpdateCurrentList() {\n      const response = await api.updatePlaylistById(store.playingList._id, store.playingList);\n      if (response.data.success) {\n        storeReducer({\n          type: GlobalStoreActionType.SET_PLAYING_LIST,\n          payload: {\n            playingList: store.playingList,\n            playlists: store.idNamePairs\n          }\n        });\n      }\n    }\n    asyncUpdateCurrentList();\n  };\n  store.undo = function () {\n    tps.undoTransaction();\n  };\n  store.redo = function () {\n    tps.doTransaction();\n  };\n  store.canAddNewSong = function () {\n    return store.currentList !== null;\n  };\n  store.canUndo = function () {\n    return store.currentList !== null && tps.hasTransactionToUndo();\n  };\n  store.canRedo = function () {\n    return store.currentList !== null && tps.hasTransactionToRedo();\n  };\n  store.canClose = function () {\n    return store.currentList !== null;\n  };\n\n  // THIS FUNCTION ENABLES THE PROCESS OF EDITING A LIST NAME\n  store.setIsListNameEditActive = function () {\n    storeReducer({\n      type: GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE,\n      payload: null\n    });\n  };\n  store.rerender = function () {\n    setStore({\n      currentModal: store.currentModal,\n      idNamePairs: store.idNamePairs,\n      currentList: store.currentList,\n      currentSongIndex: store.currentSongIndex,\n      currentSong: store.currentSong,\n      newListCounter: store.newListCounter,\n      listNameActive: store.listNameActive,\n      listIdMarkedForDeletion: store.listIdMarkedForDeletion,\n      listMarkedForDeletion: store.listMarkedForDeletion\n    });\n  };\n  function KeyPress(event) {\n    if (!store.modalOpen && event.ctrlKey) {\n      if (event.key === 'z') {\n        store.undo();\n      }\n      if (event.key === 'y') {\n        store.redo();\n      }\n    }\n  }\n  document.onkeydown = event => KeyPress(event);\n  return /*#__PURE__*/_jsxDEV(GlobalStoreContext.Provider, {\n    value: {\n      store\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 810,\n    columnNumber: 9\n  }, this);\n}\n_s(GlobalStoreContextProvider, \"d1PCA3ryM1cU+0TsZ4bGiMoKcQM=\", false, function () {\n  return [useHistory];\n});\n_c = GlobalStoreContextProvider;\nexport default GlobalStoreContext;\nexport { GlobalStoreContextProvider };\nvar _c;\n$RefreshReg$(_c, \"GlobalStoreContextProvider\");","map":{"version":3,"names":["createContext","useContext","useState","useHistory","jsTPS","api","CreateSong_Transaction","MoveSong_Transaction","RemoveSong_Transaction","UpdateSong_Transaction","AuthContext","GlobalStoreContext","console","log","GlobalStoreActionType","CHANGE_LIST_NAME","CLOSE_CURRENT_LIST","CREATE_NEW_LIST","LOAD_ID_NAME_PAIRS","MARK_LIST_FOR_DELETION","SET_CURRENT_LIST","SET_PLAYING_LIST","SET_LIST_NAME_EDIT_ACTIVE","EDIT_SONG","REMOVE_SONG","HIDE_MODALS","CHANGE_SORT_TYPE","GO_TO_MY_PLAYLISTS","tps","CurrentModal","NONE","DELETE_LIST","ERROR","GlobalStoreContextProvider","props","store","setStore","currentModal","idNamePairs","currentList","playingList","listBeingPlayed","currentSongIndex","currentSong","newListCounter","listNameActive","listIdMarkedForDeletion","listMarkedForDeletion","sortBy","searchBy","history","auth","storeReducer","action","type","payload","newListName","playlist","playlists","sortType","id","tryAcessingOtherAccountPlaylist","asyncSetCurrentList","response","getPlaylistById","data","success","push","addComment","comment","list","comments","postedBy","user","firstName","lastName","updatePlayingList","changeListName","newName","asyncChangeListName","name","updateList","updatePlaylistById","_id","getListPairs","getPlaylistPairs","pairsArray","loadIdNamePairs","closeCurrentList","clearAllTransactions","createNewList","createPlaylist","email","status","newList","sortListsBy","myPlaylists","asyncLoadIdNamePairs","sort","undefined","setPlayingList","asyncSetPlayingList","published","listens","markListForDeletion","getListToDelete","deleteList","processDelete","deletePlaylistById","deleteMarkedList","hideModals","publishPlaylist","pub","Date","duplicatePlaylist","dup","songs","showEditSongModal","songIndex","songToEdit","showRemoveSongModal","songToRemove","errorMessage","isDeleteListModalOpen","isEditSongModalOpen","isRemoveSongModalOpen","isErrorModalOpen","like","bool","asyncGetList","likes","dislikes","setCurrentList","getPlaylistSize","length","addNewSong","index","addCreateSongTransaction","createSong","song","splice","updateCurrentList","moveSong","start","end","temp","i","removeSong","updateSong","songData","title","artist","youTubeId","playlistSize","transaction","addTransaction","addMoveSongTransaction","addRemoveSongTransaction","addUpdateSongTransaction","newSongData","oldSongData","asyncUpdateCurrentList","undo","undoTransaction","redo","doTransaction","canAddNewSong","canUndo","hasTransactionToUndo","canRedo","hasTransactionToRedo","canClose","setIsListNameEditActive","rerender","KeyPress","event","modalOpen","ctrlKey","key","document","onkeydown","children"],"sources":["/Users/mikeybudney/Desktop/CSE316FINALPROJECT/client/src/store/index.js"],"sourcesContent":["import { createContext, useContext, useState } from 'react'\nimport { useHistory } from 'react-router-dom'\nimport jsTPS from '../common/jsTPS'\nimport api from './store-request-api'\nimport CreateSong_Transaction from '../transactions/CreateSong_Transaction'\nimport MoveSong_Transaction from '../transactions/MoveSong_Transaction'\nimport RemoveSong_Transaction from '../transactions/RemoveSong_Transaction'\nimport UpdateSong_Transaction from '../transactions/UpdateSong_Transaction'\nimport AuthContext from '../auth'\n//import YouTubePlayerExample from '../YouTubePlaylisterReact'\n\n/*\n    This is our global data store. Note that it uses the Flux design pattern,\n    which makes use of things like actions and reducers. \n    \n    @author McKilla Gorilla\n*/\n\n// THIS IS THE CONTEXT WE'LL USE TO SHARE OUR STORE\nexport const GlobalStoreContext = createContext({});\nconsole.log(\"create GlobalStoreContext\");\n\n// THESE ARE ALL THE TYPES OF UPDATES TO OUR GLOBAL\n// DATA STORE STATE THAT CAN BE PROCESSED\nexport const GlobalStoreActionType = {\n    CHANGE_LIST_NAME: \"CHANGE_LIST_NAME\",\n    CLOSE_CURRENT_LIST: \"CLOSE_CURRENT_LIST\",\n    CREATE_NEW_LIST: \"CREATE_NEW_LIST\",\n    LOAD_ID_NAME_PAIRS: \"LOAD_ID_NAME_PAIRS\",\n    MARK_LIST_FOR_DELETION: \"MARK_LIST_FOR_DELETION\",\n    SET_CURRENT_LIST: \"SET_CURRENT_LIST\",\n    SET_PLAYING_LIST: \"SET_PLAYING_LIST\",\n    SET_LIST_NAME_EDIT_ACTIVE: \"SET_LIST_NAME_EDIT_ACTIVE\",\n    EDIT_SONG: \"EDIT_SONG\",\n    REMOVE_SONG: \"REMOVE_SONG\",\n    HIDE_MODALS: \"HIDE_MODALS\",\n    CHANGE_SORT_TYPE: \"CHANGE_SORT_TYPE\",\n    GO_TO_MY_PLAYLISTS: \"GO_TO_MY_PLAYLISTS\"\n}\n\n// WE'LL NEED THIS TO PROCESS TRANSACTIONS\nconst tps = new jsTPS();\n\nconst CurrentModal = {\n    NONE : \"NONE\",\n    DELETE_LIST : \"DELETE_LIST\",\n    EDIT_SONG : \"EDIT_SONG\",\n    REMOVE_SONG : \"REMOVE_SONG\",\n    ERROR : \"ERROR\"\n}\n\n// WITH THIS WE'RE MAKING OUR GLOBAL DATA STORE\n// AVAILABLE TO THE REST OF THE APPLICATION\nfunction GlobalStoreContextProvider(props) {\n    // THESE ARE ALL THE THINGS OUR DATA STORE WILL MANAGE\n    const [store, setStore] = useState({\n        currentModal : CurrentModal.NONE,\n        idNamePairs: [],\n        currentList: null,\n        playingList : null,\n        listBeingPlayed: null,\n        currentSongIndex : -1,\n        currentSong : null,\n        newListCounter: 0,\n        listNameActive: false,\n        listIdMarkedForDeletion: null,\n        listMarkedForDeletion: null,\n        sortBy: null,\n        searchBy: null\n    });\n    const history = useHistory();\n\n    console.log(\"inside useGlobalStore\");\n\n    // SINCE WE'VE WRAPPED THE STORE IN THE AUTH CONTEXT WE CAN ACCESS THE USER HERE\n    const { auth } = useContext(AuthContext);\n    console.log(\"auth: \" + auth);\n\n    // HERE'S THE DATA STORE'S REDUCER, IT MUST\n    // HANDLE EVERY TYPE OF STATE CHANGE\n    const storeReducer = (action) => {\n        const { type, payload } = action;\n        switch (type) {\n            // CHANGE SORT TYPE\n            case GlobalStoreActionType.CHANGE_SORT_TYPE: {\n                return setStore({\n                    currentModal : CurrentModal.NONE,\n                    idNamePairs: store.idNamePairs,\n                    currentList: store.currentList,\n                    playingList : store.playingList,\n                    currentSongIndex: store.currentSongIndex,\n                    currentSong: store.currentSong,\n                    newListCounter: store.newListCounter,\n                    listNameActive: store.newListName,\n                    listIdMarkedForDeletion: store.listIdMarkedForDeletion,\n                    listMarkedForDeletion: store.listMarkedForDeletion,\n                    sortBy: payload,\n                    searchBy: store.searchBy\n                });\n            }\n            // LIST UPDATE OF ITS NAME\n            case GlobalStoreActionType.CHANGE_LIST_NAME: {\n                console.log(\"SORT BY\" + store.sortBy);\n                return setStore({\n                    currentModal : CurrentModal.NONE,\n                    idNamePairs: payload.idNamePairs,\n                    currentList: payload.playlist,\n                    playingList : store.playingList,\n                    currentSongIndex: -1,\n                    currentSong: null,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false,\n                    listIdMarkedForDeletion: null,\n                    listMarkedForDeletion: null,\n                    sortBy: store.sortBy,\n                    searchBy: store.searchBy\n                });\n            }\n            // STOP EDITING THE CURRENT LIST\n            case GlobalStoreActionType.CLOSE_CURRENT_LIST: {\n                return setStore({\n                    currentModal : CurrentModal.NONE,\n                    idNamePairs: store.idNamePairs,\n                    currentList: null,\n                    playingList : store.playingList,\n                    currentSongIndex: -1,\n                    currentSong: null,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false,\n                    listIdMarkedForDeletion: null,\n                    listMarkedForDeletion: null,\n                    sortBy: store.sortBy,\n                    searchBy: store.searchBy\n                })\n            }\n            // CREATE A NEW LIST\n            case GlobalStoreActionType.CREATE_NEW_LIST: {                \n                return setStore({\n                    currentModal : CurrentModal.NONE,\n                    idNamePairs: store.idNamePairs,\n                    currentList: store.currentList,\n                    playingList : store.playingList,\n                    currentSongIndex: -1,\n                    currentSong: null,\n                    newListCounter: store.newListCounter + 1,\n                    listNameActive: false,\n                    listIdMarkedForDeletion: null,\n                    listMarkedForDeletion: null,\n                    sortBy: store.sortBy,\n                    searchBy: null\n                })\n            }\n            // GET ALL THE LISTS SO WE CAN PRESENT THEM\n            case GlobalStoreActionType.LOAD_ID_NAME_PAIRS: {\n                console.log(\"LOAD_ID_NAME_PAIRS setStore is being done!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\");\n                return setStore({\n                    currentModal : CurrentModal.NONE,\n                    idNamePairs: payload.playlists,\n                    currentList: null,\n                    playingList : store.playingList,\n                    currentSongIndex: -1,\n                    currentSong: null,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false,\n                    listIdMarkedForDeletion: null,\n                    listMarkedForDeletion: null,\n                    sortBy: payload.sortType,\n                    searchBy: store.searchBy\n                });\n            }\n            // PREPARE TO DELETE A LIST\n            case GlobalStoreActionType.MARK_LIST_FOR_DELETION: {\n                return setStore({\n                    currentModal : CurrentModal.DELETE_LIST,\n                    idNamePairs: store.idNamePairs,\n                    currentList: null,\n                    playingList : store.playingList,\n                    currentSongIndex: -1,\n                    currentSong: null,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false,\n                    listIdMarkedForDeletion: payload.id,\n                    listMarkedForDeletion: payload.playlist,\n                    sortBy: store.sortBy,\n                    searchBy: store.searchBy\n                });\n            }\n            // UPDATE CURRENT LIST\n            case GlobalStoreActionType.SET_CURRENT_LIST: {\n                return setStore({\n                    currentModal : CurrentModal.NONE,\n                    idNamePairs: store.idNamePairs,\n                    currentList: payload,\n                    playingList : store.playingList,\n                    currentSongIndex: -1,\n                    currentSong: null,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false,\n                    listIdMarkedForDeletion: null,\n                    listMarkedForDeletion: null,\n                    sortBy: store.sortBy,\n                    searchBy: store.searchBy\n                });\n            }\n             // UPDATE PLAYING LIST\n             case GlobalStoreActionType.SET_PLAYING_LIST: {\n                console.log(\"SET_PLAYING_LIST setStore is being done!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\");\n                return setStore({\n                    currentModal : CurrentModal.NONE,\n                    idNamePairs: payload.playlists,\n                    currentList: store.currentList,\n                    playingList : payload.playingList,\n                    currentSongIndex: store.currentSongIndex,\n                    currentSong: store.currentSong,\n                    newListCounter: store.newListCounter,\n                    listNameActive: store.newListName,\n                    listIdMarkedForDeletion: store.listIdMarkedForDeletion,\n                    listMarkedForDeletion: store.listMarkedForDeletion,\n                    sortBy: store.sortBy,\n                    searchBy: store.searchBy\n                });\n            }\n            // START EDITING A LIST NAME\n            case GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE: {\n                return setStore({\n                    currentModal : CurrentModal.NONE,\n                    idNamePairs: store.idNamePairs,\n                    currentList: payload,\n                    playingList : store.playingList,\n                    currentSongIndex: -1,\n                    currentSong: null,\n                    newListCounter: store.newListCounter,\n                    listNameActive: true,\n                    listIdMarkedForDeletion: null,\n                    listMarkedForDeletion: null,\n                    sortBy: store.sortBy,\n                    searchBy: null\n                });\n            }\n            // \n            case GlobalStoreActionType.EDIT_SONG: {\n                return setStore({\n                    currentModal : CurrentModal.EDIT_SONG,\n                    idNamePairs: store.idNamePairs,\n                    currentList: store.currentList,\n                    playingList : store.playingList,\n                    currentSongIndex: payload.currentSongIndex,\n                    currentSong: payload.currentSong,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false,\n                    listIdMarkedForDeletion: null,\n                    listMarkedForDeletion: null,\n                    sortBy: store.sortBy,\n                    searchBy: null\n                });\n            }\n            case GlobalStoreActionType.REMOVE_SONG: {\n                return setStore({\n                    currentModal : CurrentModal.REMOVE_SONG,\n                    idNamePairs: store.idNamePairs,\n                    currentList: store.currentList,\n                    playingList : store.playingList,\n                    currentSongIndex: payload.currentSongIndex,\n                    currentSong: payload.currentSong,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false,\n                    listIdMarkedForDeletion: null,\n                    listMarkedForDeletion: null,\n                    sortBy: store.sortBy,\n                    searchBy: null\n                });\n            }\n            case GlobalStoreActionType.HIDE_MODALS: {\n                return setStore({\n                    currentModal : CurrentModal.NONE,\n                    idNamePairs: store.idNamePairs,\n                    currentList: store.currentList,\n                    playingList : store.playingList,\n                    currentSongIndex: -1,\n                    currentSong: null,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false,\n                    listIdMarkedForDeletion: null,\n                    listMarkedForDeletion: null,\n                    sortBy: store.sortBy,\n                    searchBy: store.searchBy\n                });\n            }\n            case GlobalStoreActionType.GO_TO_MY_PLAYLISTS: {\n                console.log(\"going to your playlists  going to your playlists  going to your playlists  going to your playlists\")\n                return setStore({\n                    currentModal : CurrentModal.NONE,\n                    idNamePairs: payload.playlists,\n                    currentList: null,\n                    playingList : store.playingList,\n                    currentSongIndex: store.currentSongIndex,\n                    currentSong: store.currentSong,\n                    newListCounter: store.newListCounter,\n                    listNameActive: store.newListName,\n                    listIdMarkedForDeletion: store.listIdMarkedForDeletion,\n                    listMarkedForDeletion: store.listMarkedForDeletion,\n                    sortBy: null,\n                    searchBy: null\n                });\n            }\n\n            default:\n                return store;\n        }\n    }\n\n    store.tryAcessingOtherAccountPlaylist = function(){\n        let id = \"635f203d2e072037af2e6284\";\n        async function asyncSetCurrentList(id) {\n            let response = await api.getPlaylistById(id);\n            if (response.data.success) {\n                let playlist = response.data.playlist;\n                storeReducer({\n                    type: GlobalStoreActionType.SET_CURRENT_LIST,\n                    payload: playlist\n                });\n            }\n        }\n        asyncSetCurrentList(id);\n        history.push(\"/playlist/635f203d2e072037af2e6284\");\n    }\n\n    store.addComment = function(comment){\n        let list = store.playingList;      \n        list.comments.push({postedBy: auth.user.firstName + ' ' + auth.user.lastName, comment: comment})\n        // NOW MAKE IT OFFICIAL\n        store.updatePlayingList();\n    }\n    \n    // THESE ARE THE FUNCTIONS THAT WILL UPDATE OUR STORE AND\n    // DRIVE THE STATE OF THE APPLICATION. WE'LL CALL THESE IN \n    // RESPONSE TO EVENTS INSIDE OUR COMPONENTS.\n\n    // THIS FUNCTION PROCESSES CHANGING A LIST NAME\n    store.changeListName = function (id, newName) {\n        // GET THE LIST\n        async function asyncChangeListName(id) {\n            let response = await api.getPlaylistById(id);\n            if (response.data.success) {\n                let playlist = response.data.playlist;\n                playlist.name = newName;\n                async function updateList(playlist) {\n                    response = await api.updatePlaylistById(playlist._id, playlist);\n                    if (response.data.success) {\n                        async function getListPairs(playlist) {\n                            response = await api.getPlaylistPairs();\n                            if (response.data.success) {\n                                let pairsArray = response.data.idNamePairs;\n                                storeReducer({\n                                    type: GlobalStoreActionType.CHANGE_LIST_NAME,\n                                    payload: {\n                                        idNamePairs: pairsArray,\n                                        playlist: playlist\n                                    }\n                                });\n                                store.loadIdNamePairs();\n                            }\n                        }\n                        getListPairs(playlist);\n                    }\n                }\n                updateList(playlist);\n            }\n        }\n        asyncChangeListName(id);\n    }\n\n    // THIS FUNCTION PROCESSES CLOSING THE CURRENTLY LOADED LIST\n    store.closeCurrentList = function () {\n        storeReducer({\n            type: GlobalStoreActionType.CLOSE_CURRENT_LIST,\n            payload: {}\n        });\n        tps.clearAllTransactions();\n        history.push(\"/\");\n    }\n\n    // THIS FUNCTION CREATES A NEW LIST\n    store.createNewList = async function () {\n        let newListName = \"Untitled\" + store.newListCounter;\n        const response = await api.createPlaylist(newListName, auth.user.email, auth.user.firstName + ' ' + auth.user.lastName, [], 0, 0, [], \"no\", 0);\n        console.log(\"createNewList response: \" + response);\n        if (response.status === 201) {\n            tps.clearAllTransactions();\n            let newList = response.data.playlist;\n            storeReducer({\n                type: GlobalStoreActionType.CREATE_NEW_LIST\n            }\n            );\n            history.push(\"/\");\n            store.loadIdNamePairs();\n        }\n        else {\n            console.log(\"API FAILED TO CREATE A NEW LIST\");\n        }\n    }\n\n    store.sortListsBy = function (sortBy) {\n        storeReducer({\n            type: GlobalStoreActionType.CHANGE_SORT_TYPE,\n            payload: sortBy\n        });\n        console.log(sortBy);\n        console.log(store);\n        store.loadIdNamePairs(sortBy);\n        console.log(store.sortBy)\n    }\n\n    store.myPlaylists = function () {\n        async function asyncLoadIdNamePairs() {\n            const response = await api.getPlaylistPairs();\n            if (response.data.success) {\n                let pairsArray = response.data.idNamePairs;\n                console.log(pairsArray);\n                storeReducer({\n                    type: GlobalStoreActionType.GO_TO_MY_PLAYLISTS,\n                    payload: {playlists: pairsArray}\n                });\n            }\n            else {\n                console.log(\"API FAILED TO GET THE LIST PAIRS\");\n            }\n        }\n        asyncLoadIdNamePairs();\n    }\n\n\n    // THIS FUNCTION LOADS ALL THE ID, NAME PAIRS SO WE CAN LIST ALL THE LISTS\n    store.loadIdNamePairs = function (sortBy) {\n        async function asyncLoadIdNamePairs() {\n            const response = await api.getPlaylistPairs();\n            if (response.data.success) {\n                let pairsArray = response.data.idNamePairs;\n                console.log(pairsArray);\n                if(store.sortBy !== null){\n                    pairsArray.sort(store.sortBy);\n                }\n                if(sortBy !== undefined && sortBy !== null){\n                    pairsArray.sort(sortBy);\n                }\n                console.log(pairsArray);\n                storeReducer({\n                    type: GlobalStoreActionType.LOAD_ID_NAME_PAIRS,\n                    payload: {playlists: pairsArray, sortType: sortBy}\n                });\n            }\n            else {\n                console.log(\"API FAILED TO GET THE LIST PAIRS\");\n            }\n        }\n        asyncLoadIdNamePairs();\n    }\n\n    store.setPlayingList = function (id) {\n        async function asyncSetPlayingList(id) {\n            let response = await api.getPlaylistById(id);\n            if (response.data.success) {\n                let playlist = response.data.playlist;\n                if(playlist.published!==\"no\"){\n                    playlist.listens++;\n                    response = await api.updatePlaylistById(playlist._id, playlist);\n                    if (response.data.success) {\n                        response = await api.getPlaylistPairs();\n                            if (response.data.success) {\n                                let pairsArray = response.data.idNamePairs;\n                                console.log(\"PAIRS ARRAY:  : : : :: : : : ::  :: : :: : : : ::  : : :: : : :: : : ::  \" + pairsArray);\n                                storeReducer({\n                                    type: GlobalStoreActionType.SET_PLAYING_LIST,\n                                    payload: {playingList: playlist, playlists: pairsArray}\n                                });\n                                console.log(store.idNamePairs);\n                            }\n                    }\n                } else {\n                    storeReducer({\n                        type: GlobalStoreActionType.SET_PLAYING_LIST,\n                        payload: {playingList: playlist, playlists: store.idNamePairs}\n                    });\n                }\n            }\n        }\n        asyncSetPlayingList(id);\n    }\n    \n\n\n    // THE FOLLOWING 5 FUNCTIONS ARE FOR COORDINATING THE DELETION\n    // OF A LIST, WHICH INCLUDES USING A VERIFICATION MODAL. THE\n    // FUNCTIONS ARE markListForDeletion, deleteList, deleteMarkedList,\n    // showDeleteListModal, and hideDeleteListModal\n    store.markListForDeletion = function (id) {\n        async function getListToDelete(id) {\n            let response = await api.getPlaylistById(id);\n            if (response.data.success) {\n                let playlist = response.data.playlist;\n                storeReducer({\n                    type: GlobalStoreActionType.MARK_LIST_FOR_DELETION,\n                    payload: {id: id, playlist: playlist}\n                });\n            }\n        }\n        getListToDelete(id);\n    }\n    store.deleteList = function (id) {\n        async function processDelete(id) {\n            let response = await api.deletePlaylistById(id);\n            store.loadIdNamePairs();\n            if (response.data.success) {\n                history.push(\"/\");\n            }\n        }\n        processDelete(id);\n    }\n    store.deleteMarkedList = function() {\n        store.deleteList(store.listIdMarkedForDeletion);\n        store.hideModals();\n        \n    }\n\n    store.publishPlaylist = function(id) {\n        async function pub(id) {\n            let response = await api.getPlaylistById(id);\n            if (response.data.success) {\n                let playlist = response.data.playlist;\n                playlist.published = new Date();\n                response = await api.updatePlaylistById(playlist._id, playlist);\n                store.loadIdNamePairs(store.sortBy);\n            }\n        }\n        pub(id);\n    }\n    store.duplicatePlaylist = function(id) {\n        async function dup(id) {\n            let response = await api.getPlaylistById(id);\n            if (response.data.success) {\n                let playlist = response.data.playlist;\n                response = await api.createPlaylist(\"Copy of \"+playlist.name, auth.user.email, auth.user.firstName + ' ' + auth.user.lastName, playlist.songs, 0, 0, [], \"no\", 0);\n                console.log(\"createNewList response: \" + response);\n                if (response.status === 201) {\n                    history.push(\"/\");\n                    store.loadIdNamePairs();\n                }\n            }\n        }\n        dup(id);\n    }\n\n\n    // THIS FUNCTION SHOWS THE MODAL FOR PROMPTING THE USER\n    // TO SEE IF THEY REALLY WANT TO DELETE THE LIST\n\n    store.showEditSongModal = (songIndex, songToEdit) => {\n        storeReducer({\n            type: GlobalStoreActionType.EDIT_SONG,\n            payload: {currentSongIndex: songIndex, currentSong: songToEdit}\n        });        \n    }\n    store.showRemoveSongModal = (songIndex, songToRemove) => {\n        storeReducer({\n            type: GlobalStoreActionType.REMOVE_SONG,\n            payload: {currentSongIndex: songIndex, currentSong: songToRemove}\n        });        \n    }\n    store.hideModals = () => {\n        auth.errorMessage = null;\n        storeReducer({\n            type: GlobalStoreActionType.HIDE_MODALS,\n            payload: {}\n        });    \n    }\n    store.isDeleteListModalOpen = () => {\n        return store.currentModal === CurrentModal.DELETE_LIST;\n    }\n    store.isEditSongModalOpen = () => {\n        return store.currentModal === CurrentModal.EDIT_SONG;\n    }\n    store.isRemoveSongModalOpen = () => {\n        return store.currentModal === CurrentModal.REMOVE_SONG;\n    }\n    store.isErrorModalOpen = () => {\n        return store.currentModal === CurrentModal.ERROR;\n    }\n\n    \n    store.like = function (id, bool){\n        async function asyncGetList(id) {\n            let response = await api.getPlaylistById(id);\n            if (response.data.success) {\n                let playlist = response.data.playlist;\n                if(bool){\n                    playlist.likes++;\n                } else {\n                    playlist.dislikes++;\n                }\n                response = await api.updatePlaylistById(playlist._id, playlist);\n                if (response.data.success) {\n                    console.log(\"liked\");\n                    store.loadIdNamePairs(store.loadIdNamePairs(store.sortBy));\n                }\n            }\n        }\n        asyncGetList(id);\n    }\n\n    // THE FOLLOWING 8 FUNCTIONS ARE FOR COORDINATING THE UPDATING\n    // OF A LIST, WHICH INCLUDES DEALING WITH THE TRANSACTION STACK. THE\n    // FUNCTIONS ARE setCurrentList, addMoveItemTransaction, addUpdateItemTransaction,\n    // moveItem, updateItem, updateCurrentList, undo, and redo\n    store.setCurrentList = function (id) {\n        async function asyncSetCurrentList(id) {\n            let response = await api.getPlaylistById(id);\n            if (response.data.success) {\n                let playlist = response.data.playlist;\n\n                response = await api.updatePlaylistById(playlist._id, playlist);\n                if (response.data.success) {\n                    storeReducer({\n                        type: GlobalStoreActionType.SET_CURRENT_LIST,\n                        payload: playlist\n                    });\n                }\n            }\n        }\n        asyncSetCurrentList(id);\n    }\n\n    store.getPlaylistSize = function() {\n        return store.currentList.songs.length;\n    }\n    store.addNewSong = function() {\n        let index = this.getPlaylistSize();\n        this.addCreateSongTransaction(index, \"Untitled\", \"?\", \"dQw4w9WgXcQ\");\n    }\n    // THIS FUNCTION CREATES A NEW SONG IN THE CURRENT LIST\n    // USING THE PROVIDED DATA AND PUTS THIS SONG AT INDEX\n    store.createSong = function(index, song) {\n        let list = store.currentList;      \n        list.songs.splice(index, 0, song);\n        // NOW MAKE IT OFFICIAL\n        store.updateCurrentList();\n    }\n    // THIS FUNCTION MOVES A SONG IN THE CURRENT LIST FROM\n    // start TO end AND ADJUSTS ALL OTHER ITEMS ACCORDINGLY\n    store.moveSong = function(start, end) {\n        let list = store.currentList;\n\n        // WE NEED TO UPDATE THE STATE FOR THE APP\n        if (start < end) {\n            let temp = list.songs[start];\n            for (let i = start; i < end; i++) {\n                list.songs[i] = list.songs[i + 1];\n            }\n            list.songs[end] = temp;\n        }\n        else if (start > end) {\n            let temp = list.songs[start];\n            for (let i = start; i > end; i--) {\n                list.songs[i] = list.songs[i - 1];\n            }\n            list.songs[end] = temp;\n        }\n\n        // NOW MAKE IT OFFICIAL\n        store.updateCurrentList();\n    }\n    // THIS FUNCTION REMOVES THE SONG AT THE index LOCATION\n    // FROM THE CURRENT LIST\n    store.removeSong = function(index) {\n        let list = store.currentList;      \n        list.songs.splice(index, 1); \n\n        // NOW MAKE IT OFFICIAL\n        store.updateCurrentList();\n    }\n    // THIS FUNCTION UPDATES THE TEXT IN THE ITEM AT index TO text\n    store.updateSong = function(index, songData) {\n        let list = store.currentList;\n        let song = list.songs[index];\n        song.title = songData.title;\n        song.artist = songData.artist;\n        song.youTubeId = songData.youTubeId;\n\n        // NOW MAKE IT OFFICIAL\n        store.updateCurrentList();\n    }\n    store.addNewSong = () => {\n        let playlistSize = store.getPlaylistSize();\n        store.addCreateSongTransaction(\n            playlistSize, \"Untitled\", \"?\", \"dQw4w9WgXcQ\");\n    }\n    // THIS FUNCDTION ADDS A CreateSong_Transaction TO THE TRANSACTION STACK\n    store.addCreateSongTransaction = (index, title, artist, youTubeId) => {\n        // ADD A SONG ITEM AND ITS NUMBER\n        let song = {\n            title: title,\n            artist: artist,\n            youTubeId: youTubeId\n        };\n        let transaction = new CreateSong_Transaction(store, index, song);\n        tps.addTransaction(transaction);\n    }    \n    store.addMoveSongTransaction = function (start, end) {\n        let transaction = new MoveSong_Transaction(store, start, end);\n        tps.addTransaction(transaction);\n    }\n    // THIS FUNCTION ADDS A RemoveSong_Transaction TO THE TRANSACTION STACK\n    store.addRemoveSongTransaction = () => {\n        let index = store.currentSongIndex;\n        let song = store.currentList.songs[index];\n        let transaction = new RemoveSong_Transaction(store, index, song);\n        tps.addTransaction(transaction);\n    }\n    store.addUpdateSongTransaction = function (index, newSongData) {\n        let song = store.currentList.songs[index];\n        let oldSongData = {\n            title: song.title,\n            artist: song.artist,\n            youTubeId: song.youTubeId\n        };\n        let transaction = new UpdateSong_Transaction(this, index, oldSongData, newSongData);        \n        tps.addTransaction(transaction);\n    }\n    store.updateCurrentList = function() {\n        async function asyncUpdateCurrentList() {\n            const response = await api.updatePlaylistById(store.currentList._id, store.currentList);\n            if (response.data.success) {\n                storeReducer({\n                    type: GlobalStoreActionType.SET_CURRENT_LIST,\n                    payload: store.currentList\n                });\n            }\n        }\n        asyncUpdateCurrentList();\n    }\n\n    store.updatePlayingList = function() {\n        async function asyncUpdateCurrentList() {\n            const response = await api.updatePlaylistById(store.playingList._id, store.playingList);\n            if (response.data.success) {\n                storeReducer({\n                    type: GlobalStoreActionType.SET_PLAYING_LIST,\n                    payload: {playingList: store.playingList, playlists: store.idNamePairs}\n                });\n            }\n        }\n        asyncUpdateCurrentList();\n    }\n\n    store.undo = function () {\n        tps.undoTransaction();\n    }\n    store.redo = function () {\n        tps.doTransaction();\n    }\n    store.canAddNewSong = function() {\n        return (store.currentList !== null);\n    }\n    store.canUndo = function() {\n        return ((store.currentList !== null) && tps.hasTransactionToUndo());\n    }\n    store.canRedo = function() {\n        return ((store.currentList !== null) && tps.hasTransactionToRedo());\n    }\n    store.canClose = function() {\n        return (store.currentList !== null);\n    }\n\n    // THIS FUNCTION ENABLES THE PROCESS OF EDITING A LIST NAME\n    store.setIsListNameEditActive = function () {\n        storeReducer({\n            type: GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE,\n            payload: null\n        });\n    }\n\n    store.rerender = function () {\n        setStore({\n            currentModal : store.currentModal,\n            idNamePairs: store.idNamePairs,\n            currentList: store.currentList,\n            currentSongIndex: store.currentSongIndex,\n            currentSong: store.currentSong,\n            newListCounter: store.newListCounter,\n            listNameActive: store.listNameActive,\n            listIdMarkedForDeletion: store.listIdMarkedForDeletion,\n            listMarkedForDeletion: store.listMarkedForDeletion\n        })\n    }\n\n    function KeyPress(event) {\n        if (!store.modalOpen && event.ctrlKey){\n            if(event.key === 'z'){\n                store.undo();\n            } \n            if(event.key === 'y'){\n                store.redo();\n            }\n        }\n    }\n  \n    document.onkeydown = (event) => KeyPress(event);\n\n\n    return (\n        <GlobalStoreContext.Provider value={{\n            store\n        }}>\n            {props.children}\n        </GlobalStoreContext.Provider>\n    );\n}\n\nexport default GlobalStoreContext;\nexport { GlobalStoreContextProvider };"],"mappings":"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"},"metadata":{},"sourceType":"module"}