{"ast":null,"code":"/*\n    This is our http api, which we use to send requests to\n    our back-end API. Note we`re using the Axios library\n    for doing this, which is an easy to use AJAX-based\n    library. We could (and maybe should) use Fetch, which\n    is a native (to browsers) standard, but Axios is easier\n    to use when sending JSON back and forth and it`s a Promise-\n    based API which helps a lot with asynchronous communication.\n    \n    @author McKilla Gorilla\n*/\n\nimport axios from 'axios';\naxios.defaults.withCredentials = true;\nconst api = axios.create({\n  baseURL: 'http://localhost:4000/api'\n});\n\n// THESE ARE ALL THE REQUESTS WE`LL BE MAKING, ALL REQUESTS HAVE A\n// REQUEST METHOD (like get) AND PATH (like /top5list). SOME ALSO\n// REQUIRE AN id SO THAT THE SERVER KNOWS ON WHICH LIST TO DO ITS\n// WORK, AND SOME REQUIRE DATA, WHICH WE WE WILL FORMAT HERE, FOR WHEN\n// WE NEED TO PUT THINGS INTO THE DATABASE OR IF WE HAVE SOME\n// CUSTOM FILTERS FOR QUERIES\nexport const createPlaylist = (newListName, userEmail, userName, newSongs, likes, dislikes, comments, publishedDate, listens) => {\n  return api.post(`/playlist/`, {\n    // SPECIFY THE PAYLOAD\n    name: newListName,\n    ownerEmail: userEmail,\n    userName: userName,\n    songs: newSongs,\n    likes: likes,\n    dislikes: dislikes,\n    comments: comments,\n    published: publishedDate,\n    listens: listens\n  });\n};\nexport const deletePlaylistById = id => api.delete(`/playlist/${id}`);\nexport const getPlaylistById = id => api.get(`/playlist/${id}`);\nexport const getPlaylistPairs = () => api.get(`/playlistpairs/`);\nexport const updatePlaylistById = (id, playlist) => {\n  console.log(\"SENDING HTTP REQUEST TO UPDATE PLAYLIST !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\");\n  return api.put(`/playlist/${id}`, {\n    // SPECIFY THE PAYLOAD\n    playlist: playlist\n  });\n};\nexport const getPlaylists = (bool, search) => api.get(`/playlists/${bool}${search}`);\nconst apis = {\n  createPlaylist,\n  deletePlaylistById,\n  getPlaylistById,\n  getPlaylistPairs,\n  updatePlaylistById,\n  getPlaylists\n};\nexport default apis;","map":{"version":3,"names":["axios","defaults","withCredentials","api","create","baseURL","createPlaylist","newListName","userEmail","userName","newSongs","likes","dislikes","comments","publishedDate","listens","post","name","ownerEmail","songs","published","deletePlaylistById","id","delete","getPlaylistById","get","getPlaylistPairs","updatePlaylistById","playlist","console","log","put","getPlaylists","bool","search","apis"],"sources":["/Users/mikeybudney/Desktop/CSE316FINALPROJECT/client/src/store/store-request-api/index.js"],"sourcesContent":["/*\n    This is our http api, which we use to send requests to\n    our back-end API. Note we`re using the Axios library\n    for doing this, which is an easy to use AJAX-based\n    library. We could (and maybe should) use Fetch, which\n    is a native (to browsers) standard, but Axios is easier\n    to use when sending JSON back and forth and it`s a Promise-\n    based API which helps a lot with asynchronous communication.\n    \n    @author McKilla Gorilla\n*/\n\nimport axios from 'axios'\naxios.defaults.withCredentials = true;\nconst api = axios.create({\n    baseURL: 'http://localhost:4000/api',\n})\n\n// THESE ARE ALL THE REQUESTS WE`LL BE MAKING, ALL REQUESTS HAVE A\n// REQUEST METHOD (like get) AND PATH (like /top5list). SOME ALSO\n// REQUIRE AN id SO THAT THE SERVER KNOWS ON WHICH LIST TO DO ITS\n// WORK, AND SOME REQUIRE DATA, WHICH WE WE WILL FORMAT HERE, FOR WHEN\n// WE NEED TO PUT THINGS INTO THE DATABASE OR IF WE HAVE SOME\n// CUSTOM FILTERS FOR QUERIES\nexport const createPlaylist = (newListName, userEmail, userName, newSongs, likes, dislikes, comments, publishedDate, listens) => {\n    return api.post(`/playlist/`, {\n        // SPECIFY THE PAYLOAD\n        name: newListName,\n        ownerEmail: userEmail,\n        userName: userName,\n        songs: newSongs,\n        likes: likes,\n        dislikes: dislikes,\n        comments: comments,\n        published: publishedDate,\n        listens: listens\n    })\n}\nexport const deletePlaylistById = (id) => api.delete(`/playlist/${id}`)\nexport const getPlaylistById = (id) => api.get(`/playlist/${id}`)\nexport const getPlaylistPairs = () => api.get(`/playlistpairs/`)\nexport const updatePlaylistById = (id, playlist) => {\n    console.log(\"SENDING HTTP REQUEST TO UPDATE PLAYLIST !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\");\n    return api.put(`/playlist/${id}`, {\n        // SPECIFY THE PAYLOAD\n        playlist : playlist\n    })\n}\nexport const getPlaylists = (bool, search) => api.get(`/playlists/${bool}${search}`)\n\nconst apis = {\n    createPlaylist,\n    deletePlaylistById,\n    getPlaylistById,\n    getPlaylistPairs,\n    updatePlaylistById,\n    getPlaylists\n}\n\nexport default apis\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAOA,KAAK,MAAM,OAAO;AACzBA,KAAK,CAACC,QAAQ,CAACC,eAAe,GAAG,IAAI;AACrC,MAAMC,GAAG,GAAGH,KAAK,CAACI,MAAM,CAAC;EACrBC,OAAO,EAAE;AACb,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,cAAc,GAAG,CAACC,WAAW,EAAEC,SAAS,EAAEC,QAAQ,EAAEC,QAAQ,EAAEC,KAAK,EAAEC,QAAQ,EAAEC,QAAQ,EAAEC,aAAa,EAAEC,OAAO,KAAK;EAC7H,OAAOZ,GAAG,CAACa,IAAI,CAAE,YAAW,EAAE;IAC1B;IACAC,IAAI,EAAEV,WAAW;IACjBW,UAAU,EAAEV,SAAS;IACrBC,QAAQ,EAAEA,QAAQ;IAClBU,KAAK,EAAET,QAAQ;IACfC,KAAK,EAAEA,KAAK;IACZC,QAAQ,EAAEA,QAAQ;IAClBC,QAAQ,EAAEA,QAAQ;IAClBO,SAAS,EAAEN,aAAa;IACxBC,OAAO,EAAEA;EACb,CAAC,CAAC;AACN,CAAC;AACD,OAAO,MAAMM,kBAAkB,GAAIC,EAAE,IAAKnB,GAAG,CAACoB,MAAM,CAAE,aAAYD,EAAG,EAAC,CAAC;AACvE,OAAO,MAAME,eAAe,GAAIF,EAAE,IAAKnB,GAAG,CAACsB,GAAG,CAAE,aAAYH,EAAG,EAAC,CAAC;AACjE,OAAO,MAAMI,gBAAgB,GAAG,MAAMvB,GAAG,CAACsB,GAAG,CAAE,iBAAgB,CAAC;AAChE,OAAO,MAAME,kBAAkB,GAAG,CAACL,EAAE,EAAEM,QAAQ,KAAK;EAChDC,OAAO,CAACC,GAAG,CAAC,wFAAwF,CAAC;EACrG,OAAO3B,GAAG,CAAC4B,GAAG,CAAE,aAAYT,EAAG,EAAC,EAAE;IAC9B;IACAM,QAAQ,EAAGA;EACf,CAAC,CAAC;AACN,CAAC;AACD,OAAO,MAAMI,YAAY,GAAG,CAACC,IAAI,EAAEC,MAAM,KAAK/B,GAAG,CAACsB,GAAG,CAAE,cAAaQ,IAAK,GAAEC,MAAO,EAAC,CAAC;AAEpF,MAAMC,IAAI,GAAG;EACT7B,cAAc;EACde,kBAAkB;EAClBG,eAAe;EACfE,gBAAgB;EAChBC,kBAAkB;EAClBK;AACJ,CAAC;AAED,eAAeG,IAAI"},"metadata":{},"sourceType":"module"}