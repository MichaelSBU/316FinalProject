{"ast":null,"code":"/*import React, {useContext, useState} from 'react';\nimport YouTube from 'react-youtube';\nimport Box from '@mui/material/Box';\nimport Typography from '@mui/material/Typography';\nimport FastForwardIcon from '@mui/icons-material/FastForward';\nimport FastRewindIcon from '@mui/icons-material/FastRewind';\nimport PauseIcon from '@mui/icons-material/Pause';\nimport PlayArrowIcon from '@mui/icons-material/PlayArrow';\nimport GlobalStoreContext from '../store'\n\nexport default function YouTubePlayer() {\n    \n    const {store} = useContext(GlobalStoreContext);\n    \n    const [p, setP] = useState(null);\n    const [song, setSong] = useState({title: \"CHOOSE A PLAYLIST\", artist: \"CHOOSE A PLAYLIST\"});\n    const [currentSong, setCurrentSong] = useState(0);\n\n    // THIS HAS THE YOUTUBE IDS FOR THE SONGS IN OUR CURRENTLY PLAYING PLAYLIST\n    let name = \"SELECT A PLAYLIST TO PLAY IT!\"\n    let playlist = [];\n    let wholePlaylist = null;\n    if(store.playingList !== null){\n        name = store.playingList.name;\n        wholePlaylist = store.playingList;\n        for(let i = 0; i < store.playingList.songs.length; i++){\n            playlist.push(store.playingList.songs[i].youTubeId);\n        }\n    }\n    console.log(playlist);\n\n    const playerOptions = {\n        height: '390',\n        width: '670',\n        playerVars: {\n            // https://developers.google.com/youtube/player_parameters\n            autoplay: 0,\n        },\n    };\n\n    // THIS FUNCTION LOADS THE CURRENT SONG INTO\n    // THE PLAYER AND PLAYS IT\n    function loadAndPlayCurrentSong(player) {\n        let song = playlist[currentSong];\n        setSong({title: wholePlaylist.songs[currentSong].title, artist: wholePlaylist.songs[currentSong].artist});\n        player.loadVideoById(song);\n        player.playVideo();\n    }\n\n    function onPlayerReady(event) {\n        if(store.playingList !== null && store.playingList.songs.length > 0){\n        setP(event.target);\n        loadAndPlayCurrentSong(event.target);\n        event.target.playVideo();\n        }\n    }\n\n    // THIS IS OUR EVENT HANDLER FOR WHEN THE YOUTUBE PLAYER'S STATE\n    // CHANGES. NOTE THAT playerStatus WILL HAVE A DIFFERENT INTEGER\n    // VALUE TO REPRESENT THE TYPE OF STATE CHANGE. A playerStatus\n    // VALUE OF 0 MEANS THE SONG PLAYING HAS ENDED.\n    function onPlayerStateChange(event) {\n        if(store.playingList !== null && store.playingList.songs.length > 0){\n        let playerStatus = event.data;\n        setP(event.target);\n        if (playerStatus === -1) {\n            // VIDEO UNSTARTED\n            console.log(\"-1 Video unstarted\");\n        } else if (playerStatus === 0) {\n            // THE VIDEO HAS COMPLETED PLAYING\n            handleNextSong();\n        } else if (playerStatus === 1) {\n            // THE VIDEO IS PLAYED\n            console.log(\"1 Video played\");\n        } else if (playerStatus === 2) {\n            // THE VIDEO IS PAUSED\n            console.log(\"2 Video paused\");\n        } else if (playerStatus === 3) {\n            // THE VIDEO IS BUFFERING\n            console.log(\"3 Video buffering\");\n        } else if (playerStatus === 5) {\n            // THE VIDEO HAS BEEN CUED\n            console.log(\"5 Video cued\");\n        }\n    }\n}\n\n    const handlePrevSong = () => {\n        if(store.playingList !== null && store.playingList.songs.length > 0){\n        setCurrentSong((playlist.length+currentSong-1) % playlist.length);\n        setSong({title: wholePlaylist.songs[currentSong].title, artist: wholePlaylist.songs[currentSong].artist});\n        loadAndPlayCurrentSong(p);\n        p.playVideo();\n        }\n    }\n    const handlePauseSong = () => {\n        if(store.playingList != null && store.playingList.songs.length > 0){\n        console.log(\"Paused Video\")\n        p.pauseVideo();\n        }\n    }\n    const handlePlaySong = () => {\n        if(store.playingList !== null && store.playingList.songs.length > 0){\n        console.log(\"Play Video\")\n        p.playVideo();\n        }\n    }\n    const handleNextSong = () => {\n        if(store.playingList !== null && store.playingList.songs.length > 0){\n        setCurrentSong((currentSong+1) % playlist.length);\n        setSong({title: wholePlaylist.songs[currentSong].title, artist: wholePlaylist.songs[currentSong].artist});\n        loadAndPlayCurrentSong(p);\n        p.playVideo();\n        }\n    }\n    let songNumb = \"CHOOSE A PLAYLIST\"\n    if(store.playingList !== null){\n        songNumb = (currentSong+1);\n        if(store.playingList.songs.length <= 0){\n            songNumb = \"THE SELECTED PLAYLIST HAS NO SONGS\";\n        }\n    }\n\n    let sx = {pointerEvent:\"none\", transform:\"translate(0%,1%)\"}\n    if(store.playingList !== null && store.playingList.songs.length > 0){\n        sx = {transform:\"translate(0%,1%)\"}\n    }\n\n    let title = song.title;\n    let artist = song.artist;\n    if(store.playingList !== null && store.playingList.songs.length <= 0){\n        title = \"THE SELECTED PLAYLIST HAS NO SONGS\";\n        artist = \"THE SELECTED PLAYLIST HAS NO SONGS\";\n    }\n    //WRAP YOUTUBE IN <Box sx={{pointerEvents: \"none\"}}> put here </Box> IF IT NEEDS TO BE UNCLICKABLE\n    return <Box sx={sx}>\n    <YouTube videoId={playlist[currentSong]} opts={playerOptions} onReady={onPlayerReady} onStateChange={onPlayerStateChange}></YouTube>\n    <Box sx={{pb: 1.5, transform:\"translate(0%, -3%)\", height: \"100%\", borderRadius:\"12px\", border: 1,  bgcolor:\"#cdccff\"}}>\n                                    <Typography sx={{ml:\"40%\", fontSize:25}}>Now Playing</Typography>\n                                    <Typography sx={{ml:\"20px\", fontSize:25}}>{\"Playlist: \" + name}</Typography>\n                                    <Typography sx={{ml:\"20px\", fontSize:25}}>{\"Song #: \" + songNumb}</Typography>\n                                    <Typography sx={{ml:\"20px\", fontSize:25}}>{\"Title:   \" + title}</Typography>\n                                    <Typography sx={{ml:\"20px\", fontSize:25}}>{\"Artist:   \" + artist}</Typography>\n                                    <Box sx={{border:2, height:\"75px\", borderColor:\"black\", borderRadius:5, ml:\"3%\", width:\"94%\", bgcolor:\"white\", fontSize:\"75px\"}}>\n                                        <FastRewindIcon onClick={handlePrevSong} sx={{ml: \"30%\"}} fontSize=\"inherit\"></FastRewindIcon>\n                                        <PauseIcon onClick={handlePauseSong} fontSize=\"inherit\"></PauseIcon>\n                                        <PlayArrowIcon onClick={handlePlaySong} fontSize=\"inherit\"></PlayArrowIcon>\n                                        <FastForwardIcon onClick={handleNextSong} fontSize=\"inherit\"></FastForwardIcon>\n                                    </Box>\n                                    \n    </Box>\n    </Box>;\n}*/","map":{"version":3,"names":[],"sources":["/Users/mikeybudney/Desktop/316FinalProject/client/src/components/YoutubePlayer.js"],"sourcesContent":["/*import React, {useContext, useState} from 'react';\nimport YouTube from 'react-youtube';\nimport Box from '@mui/material/Box';\nimport Typography from '@mui/material/Typography';\nimport FastForwardIcon from '@mui/icons-material/FastForward';\nimport FastRewindIcon from '@mui/icons-material/FastRewind';\nimport PauseIcon from '@mui/icons-material/Pause';\nimport PlayArrowIcon from '@mui/icons-material/PlayArrow';\nimport GlobalStoreContext from '../store'\n\nexport default function YouTubePlayer() {\n    \n    const {store} = useContext(GlobalStoreContext);\n    \n    const [p, setP] = useState(null);\n    const [song, setSong] = useState({title: \"CHOOSE A PLAYLIST\", artist: \"CHOOSE A PLAYLIST\"});\n    const [currentSong, setCurrentSong] = useState(0);\n\n    // THIS HAS THE YOUTUBE IDS FOR THE SONGS IN OUR CURRENTLY PLAYING PLAYLIST\n    let name = \"SELECT A PLAYLIST TO PLAY IT!\"\n    let playlist = [];\n    let wholePlaylist = null;\n    if(store.playingList !== null){\n        name = store.playingList.name;\n        wholePlaylist = store.playingList;\n        for(let i = 0; i < store.playingList.songs.length; i++){\n            playlist.push(store.playingList.songs[i].youTubeId);\n        }\n    }\n    console.log(playlist);\n\n    const playerOptions = {\n        height: '390',\n        width: '670',\n        playerVars: {\n            // https://developers.google.com/youtube/player_parameters\n            autoplay: 0,\n        },\n    };\n\n    // THIS FUNCTION LOADS THE CURRENT SONG INTO\n    // THE PLAYER AND PLAYS IT\n    function loadAndPlayCurrentSong(player) {\n        let song = playlist[currentSong];\n        setSong({title: wholePlaylist.songs[currentSong].title, artist: wholePlaylist.songs[currentSong].artist});\n        player.loadVideoById(song);\n        player.playVideo();\n    }\n\n    function onPlayerReady(event) {\n        if(store.playingList !== null && store.playingList.songs.length > 0){\n        setP(event.target);\n        loadAndPlayCurrentSong(event.target);\n        event.target.playVideo();\n        }\n    }\n\n    // THIS IS OUR EVENT HANDLER FOR WHEN THE YOUTUBE PLAYER'S STATE\n    // CHANGES. NOTE THAT playerStatus WILL HAVE A DIFFERENT INTEGER\n    // VALUE TO REPRESENT THE TYPE OF STATE CHANGE. A playerStatus\n    // VALUE OF 0 MEANS THE SONG PLAYING HAS ENDED.\n    function onPlayerStateChange(event) {\n        if(store.playingList !== null && store.playingList.songs.length > 0){\n        let playerStatus = event.data;\n        setP(event.target);\n        if (playerStatus === -1) {\n            // VIDEO UNSTARTED\n            console.log(\"-1 Video unstarted\");\n        } else if (playerStatus === 0) {\n            // THE VIDEO HAS COMPLETED PLAYING\n            handleNextSong();\n        } else if (playerStatus === 1) {\n            // THE VIDEO IS PLAYED\n            console.log(\"1 Video played\");\n        } else if (playerStatus === 2) {\n            // THE VIDEO IS PAUSED\n            console.log(\"2 Video paused\");\n        } else if (playerStatus === 3) {\n            // THE VIDEO IS BUFFERING\n            console.log(\"3 Video buffering\");\n        } else if (playerStatus === 5) {\n            // THE VIDEO HAS BEEN CUED\n            console.log(\"5 Video cued\");\n        }\n    }\n}\n\n    const handlePrevSong = () => {\n        if(store.playingList !== null && store.playingList.songs.length > 0){\n        setCurrentSong((playlist.length+currentSong-1) % playlist.length);\n        setSong({title: wholePlaylist.songs[currentSong].title, artist: wholePlaylist.songs[currentSong].artist});\n        loadAndPlayCurrentSong(p);\n        p.playVideo();\n        }\n    }\n    const handlePauseSong = () => {\n        if(store.playingList != null && store.playingList.songs.length > 0){\n        console.log(\"Paused Video\")\n        p.pauseVideo();\n        }\n    }\n    const handlePlaySong = () => {\n        if(store.playingList !== null && store.playingList.songs.length > 0){\n        console.log(\"Play Video\")\n        p.playVideo();\n        }\n    }\n    const handleNextSong = () => {\n        if(store.playingList !== null && store.playingList.songs.length > 0){\n        setCurrentSong((currentSong+1) % playlist.length);\n        setSong({title: wholePlaylist.songs[currentSong].title, artist: wholePlaylist.songs[currentSong].artist});\n        loadAndPlayCurrentSong(p);\n        p.playVideo();\n        }\n    }\n    let songNumb = \"CHOOSE A PLAYLIST\"\n    if(store.playingList !== null){\n        songNumb = (currentSong+1);\n        if(store.playingList.songs.length <= 0){\n            songNumb = \"THE SELECTED PLAYLIST HAS NO SONGS\";\n        }\n    }\n\n    let sx = {pointerEvent:\"none\", transform:\"translate(0%,1%)\"}\n    if(store.playingList !== null && store.playingList.songs.length > 0){\n        sx = {transform:\"translate(0%,1%)\"}\n    }\n\n    let title = song.title;\n    let artist = song.artist;\n    if(store.playingList !== null && store.playingList.songs.length <= 0){\n        title = \"THE SELECTED PLAYLIST HAS NO SONGS\";\n        artist = \"THE SELECTED PLAYLIST HAS NO SONGS\";\n    }\n    //WRAP YOUTUBE IN <Box sx={{pointerEvents: \"none\"}}> put here </Box> IF IT NEEDS TO BE UNCLICKABLE\n    return <Box sx={sx}>\n    <YouTube videoId={playlist[currentSong]} opts={playerOptions} onReady={onPlayerReady} onStateChange={onPlayerStateChange}></YouTube>\n    <Box sx={{pb: 1.5, transform:\"translate(0%, -3%)\", height: \"100%\", borderRadius:\"12px\", border: 1,  bgcolor:\"#cdccff\"}}>\n                                    <Typography sx={{ml:\"40%\", fontSize:25}}>Now Playing</Typography>\n                                    <Typography sx={{ml:\"20px\", fontSize:25}}>{\"Playlist: \" + name}</Typography>\n                                    <Typography sx={{ml:\"20px\", fontSize:25}}>{\"Song #: \" + songNumb}</Typography>\n                                    <Typography sx={{ml:\"20px\", fontSize:25}}>{\"Title:   \" + title}</Typography>\n                                    <Typography sx={{ml:\"20px\", fontSize:25}}>{\"Artist:   \" + artist}</Typography>\n                                    <Box sx={{border:2, height:\"75px\", borderColor:\"black\", borderRadius:5, ml:\"3%\", width:\"94%\", bgcolor:\"white\", fontSize:\"75px\"}}>\n                                        <FastRewindIcon onClick={handlePrevSong} sx={{ml: \"30%\"}} fontSize=\"inherit\"></FastRewindIcon>\n                                        <PauseIcon onClick={handlePauseSong} fontSize=\"inherit\"></PauseIcon>\n                                        <PlayArrowIcon onClick={handlePlaySong} fontSize=\"inherit\"></PlayArrowIcon>\n                                        <FastForwardIcon onClick={handleNextSong} fontSize=\"inherit\"></FastForwardIcon>\n                                    </Box>\n                                    \n    </Box>\n    </Box>;\n}*/"],"mappings},"metadata":{},"sourceType":"module"}