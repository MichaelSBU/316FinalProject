{"ast":null,"code":"var _jsxFileName = \"/Users/mikeybudney/Desktop/CSE316FINALPROJECT/client/src/store/index.js\",\n  _s = $RefreshSig$();\nimport { createContext, useContext, useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport jsTPS from '../common/jsTPS';\nimport api from './store-request-api';\nimport CreateSong_Transaction from '../transactions/CreateSong_Transaction';\nimport MoveSong_Transaction from '../transactions/MoveSong_Transaction';\nimport RemoveSong_Transaction from '../transactions/RemoveSong_Transaction';\nimport UpdateSong_Transaction from '../transactions/UpdateSong_Transaction';\nimport AuthContext from '../auth';\n//import YouTubePlayerExample from '../YouTubePlaylisterReact'\n\n/*\n    This is our global data store. Note that it uses the Flux design pattern,\n    which makes use of things like actions and reducers. \n    \n    @author McKilla Gorilla\n*/\n\n// THIS IS THE CONTEXT WE'LL USE TO SHARE OUR STORE\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const GlobalStoreContext = /*#__PURE__*/createContext({});\nconsole.log(\"create GlobalStoreContext\");\n\n// THESE ARE ALL THE TYPES OF UPDATES TO OUR GLOBAL\n// DATA STORE STATE THAT CAN BE PROCESSED\nexport const GlobalStoreActionType = {\n  CHANGE_LIST_NAME: \"CHANGE_LIST_NAME\",\n  CLOSE_CURRENT_LIST: \"CLOSE_CURRENT_LIST\",\n  CREATE_NEW_LIST: \"CREATE_NEW_LIST\",\n  LOAD_ID_NAME_PAIRS: \"LOAD_ID_NAME_PAIRS\",\n  MARK_LIST_FOR_DELETION: \"MARK_LIST_FOR_DELETION\",\n  SET_CURRENT_LIST: \"SET_CURRENT_LIST\",\n  SET_PLAYING_LIST: \"SET_PLAYING_LIST\",\n  SET_LIST_NAME_EDIT_ACTIVE: \"SET_LIST_NAME_EDIT_ACTIVE\",\n  EDIT_SONG: \"EDIT_SONG\",\n  REMOVE_SONG: \"REMOVE_SONG\",\n  HIDE_MODALS: \"HIDE_MODALS\",\n  CHANGE_SORT_TYPE: \"CHANGE_SORT_TYPE\",\n  GO_TO_MY_PLAYLISTS: \"GO_TO_MY_PLAYLISTS\"\n};\n\n// WE'LL NEED THIS TO PROCESS TRANSACTIONS\nconst tps = new jsTPS();\nconst CurrentModal = {\n  NONE: \"NONE\",\n  DELETE_LIST: \"DELETE_LIST\",\n  EDIT_SONG: \"EDIT_SONG\",\n  REMOVE_SONG: \"REMOVE_SONG\",\n  ERROR: \"ERROR\"\n};\n\n// WITH THIS WE'RE MAKING OUR GLOBAL DATA STORE\n// AVAILABLE TO THE REST OF THE APPLICATION\nfunction GlobalStoreContextProvider(props) {\n  _s();\n  // THESE ARE ALL THE THINGS OUR DATA STORE WILL MANAGE\n  const [store, setStore] = useState({\n    currentModal: CurrentModal.NONE,\n    idNamePairs: [],\n    currentList: null,\n    playingList: null,\n    listBeingPlayed: null,\n    currentSongIndex: -1,\n    currentSong: null,\n    newListCounter: 0,\n    listNameActive: false,\n    listIdMarkedForDeletion: null,\n    listMarkedForDeletion: null,\n    sortBy: null,\n    searchBy: auth.user === \"guest\" ? true : null,\n    searchValue: \"\"\n  });\n  const history = useHistory();\n  console.log(\"inside useGlobalStore\");\n\n  // SINCE WE'VE WRAPPED THE STORE IN THE AUTH CONTEXT WE CAN ACCESS THE USER HERE\n  const {\n    auth\n  } = useContext(AuthContext);\n  console.log(\"auth: \" + auth);\n\n  // HERE'S THE DATA STORE'S REDUCER, IT MUST\n  // HANDLE EVERY TYPE OF STATE CHANGE\n  const storeReducer = action => {\n    const {\n      type,\n      payload\n    } = action;\n    switch (type) {\n      // CHANGE SORT TYPE\n      case GlobalStoreActionType.CHANGE_SORT_TYPE:\n        {\n          return setStore({\n            currentModal: CurrentModal.NONE,\n            idNamePairs: store.idNamePairs,\n            currentList: store.currentList,\n            playingList: store.playingList,\n            currentSongIndex: store.currentSongIndex,\n            currentSong: store.currentSong,\n            listNameActive: store.newListName,\n            listIdMarkedForDeletion: store.listIdMarkedForDeletion,\n            listMarkedForDeletion: store.listMarkedForDeletion,\n            sortBy: payload,\n            searchBy: store.searchBy,\n            searchValue: store.searchValue\n          });\n        }\n      // LIST UPDATE OF ITS NAME\n      case GlobalStoreActionType.CHANGE_LIST_NAME:\n        {\n          console.log(\"SORT BY\" + store.sortBy);\n          return setStore({\n            currentModal: CurrentModal.NONE,\n            idNamePairs: payload.idNamePairs,\n            currentList: payload.playlist,\n            playingList: store.playingList,\n            currentSongIndex: -1,\n            currentSong: null,\n            listNameActive: false,\n            listIdMarkedForDeletion: null,\n            listMarkedForDeletion: null,\n            sortBy: store.sortBy,\n            searchBy: store.searchBy,\n            searchValue: store.searchValue\n          });\n        }\n      // STOP EDITING THE CURRENT LIST\n      case GlobalStoreActionType.CLOSE_CURRENT_LIST:\n        {\n          return setStore({\n            currentModal: CurrentModal.NONE,\n            idNamePairs: store.idNamePairs,\n            currentList: null,\n            playingList: store.playingList,\n            currentSongIndex: -1,\n            currentSong: null,\n            listNameActive: false,\n            listIdMarkedForDeletion: null,\n            listMarkedForDeletion: null,\n            sortBy: store.sortBy,\n            searchBy: store.searchBy,\n            searchValue: store.searchValue\n          });\n        }\n      // CREATE A NEW LIST\n      case GlobalStoreActionType.CREATE_NEW_LIST:\n        {\n          return setStore({\n            currentModal: CurrentModal.NONE,\n            idNamePairs: store.idNamePairs,\n            currentList: store.currentList,\n            playingList: store.playingList,\n            currentSongIndex: -1,\n            currentSong: null,\n            listNameActive: false,\n            listIdMarkedForDeletion: null,\n            listMarkedForDeletion: null,\n            sortBy: store.sortBy,\n            searchBy: null,\n            searchValue: store.searchValue\n          });\n        }\n      // GET ALL THE LISTS SO WE CAN PRESENT THEM\n      case GlobalStoreActionType.LOAD_ID_NAME_PAIRS:\n        {\n          console.log(\"LOAD_ID_NAME_PAIRS setStore is being done!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\");\n          return setStore({\n            currentModal: CurrentModal.NONE,\n            idNamePairs: payload.playlists,\n            currentList: null,\n            playingList: store.playingList,\n            currentSongIndex: -1,\n            currentSong: null,\n            listNameActive: false,\n            listIdMarkedForDeletion: null,\n            listMarkedForDeletion: null,\n            sortBy: payload.sortType,\n            searchBy: store.searchBy,\n            searchValue: store.searchValue\n          });\n        }\n      // PREPARE TO DELETE A LIST\n      case GlobalStoreActionType.MARK_LIST_FOR_DELETION:\n        {\n          return setStore({\n            currentModal: CurrentModal.DELETE_LIST,\n            idNamePairs: store.idNamePairs,\n            currentList: null,\n            playingList: store.playingList,\n            currentSongIndex: -1,\n            currentSong: null,\n            listNameActive: false,\n            listIdMarkedForDeletion: payload.id,\n            listMarkedForDeletion: payload.playlist,\n            sortBy: store.sortBy,\n            searchBy: store.searchBy,\n            searchValue: store.searchValue\n          });\n        }\n      // UPDATE CURRENT LIST\n      case GlobalStoreActionType.SET_CURRENT_LIST:\n        {\n          return setStore({\n            currentModal: CurrentModal.NONE,\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            playingList: store.playingList,\n            currentSongIndex: -1,\n            currentSong: null,\n            listNameActive: false,\n            listIdMarkedForDeletion: null,\n            listMarkedForDeletion: null,\n            sortBy: store.sortBy,\n            searchBy: store.searchBy,\n            searchValue: store.searchValue\n          });\n        }\n      // UPDATE PLAYING LIST\n      case GlobalStoreActionType.SET_PLAYING_LIST:\n        {\n          console.log(\"SET_PLAYING_LIST setStore is being done!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\");\n          return setStore({\n            currentModal: CurrentModal.NONE,\n            idNamePairs: payload.playlists,\n            currentList: store.currentList,\n            playingList: payload.playingList,\n            currentSongIndex: store.currentSongIndex,\n            currentSong: store.currentSong,\n            listNameActive: store.newListName,\n            listIdMarkedForDeletion: store.listIdMarkedForDeletion,\n            listMarkedForDeletion: store.listMarkedForDeletion,\n            sortBy: store.sortBy,\n            searchBy: store.searchBy,\n            searchValue: store.searchValue\n          });\n        }\n      // START EDITING A LIST NAME\n      case GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE:\n        {\n          return setStore({\n            currentModal: CurrentModal.NONE,\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            playingList: store.playingList,\n            currentSongIndex: -1,\n            currentSong: null,\n            listNameActive: true,\n            listIdMarkedForDeletion: null,\n            listMarkedForDeletion: null,\n            sortBy: store.sortBy,\n            searchBy: null,\n            searchValue: store.searchValue\n          });\n        }\n      // \n      case GlobalStoreActionType.EDIT_SONG:\n        {\n          return setStore({\n            currentModal: CurrentModal.EDIT_SONG,\n            idNamePairs: store.idNamePairs,\n            currentList: store.currentList,\n            playingList: store.playingList,\n            currentSongIndex: payload.currentSongIndex,\n            currentSong: payload.currentSong,\n            listNameActive: false,\n            listIdMarkedForDeletion: null,\n            listMarkedForDeletion: null,\n            sortBy: store.sortBy,\n            searchBy: null,\n            searchValue: store.searchValue\n          });\n        }\n      case GlobalStoreActionType.REMOVE_SONG:\n        {\n          return setStore({\n            currentModal: CurrentModal.REMOVE_SONG,\n            idNamePairs: store.idNamePairs,\n            currentList: store.currentList,\n            playingList: store.playingList,\n            currentSongIndex: payload.currentSongIndex,\n            currentSong: payload.currentSong,\n            listNameActive: false,\n            listIdMarkedForDeletion: null,\n            listMarkedForDeletion: null,\n            sortBy: store.sortBy,\n            searchBy: null,\n            searchValue: store.searchValue\n          });\n        }\n      case GlobalStoreActionType.HIDE_MODALS:\n        {\n          return setStore({\n            currentModal: CurrentModal.NONE,\n            idNamePairs: store.idNamePairs,\n            currentList: store.currentList,\n            playingList: store.playingList,\n            currentSongIndex: -1,\n            currentSong: null,\n            listNameActive: false,\n            listIdMarkedForDeletion: null,\n            listMarkedForDeletion: null,\n            sortBy: store.sortBy,\n            searchBy: store.searchBy,\n            searchValue: store.searchValue\n          });\n        }\n      case GlobalStoreActionType.GO_TO_MY_PLAYLISTS:\n        {\n          console.log(\"going to your playlists  going to your playlists  going to your playlists  going to your playlists\");\n          return setStore({\n            currentModal: CurrentModal.NONE,\n            idNamePairs: payload.playlists,\n            currentList: null,\n            playingList: store.playingList,\n            currentSongIndex: store.currentSongIndex,\n            currentSong: store.currentSong,\n            listNameActive: store.newListName,\n            listIdMarkedForDeletion: store.listIdMarkedForDeletion,\n            listMarkedForDeletion: store.listMarkedForDeletion,\n            sortBy: payload.sortBy,\n            searchBy: payload.search,\n            searchValue: payload.searchValue\n          });\n        }\n      default:\n        return store;\n    }\n  };\n  store.enterGuestMode = function () {\n    auth.loginUser(\"guest\", \"p\");\n  };\n  store.tryAcessingOtherAccountPlaylist = function () {\n    let id = \"635f203d2e072037af2e6284\";\n    async function asyncSetCurrentList(id) {\n      let response = await api.getPlaylistById(id);\n      if (response.data.success) {\n        let playlist = response.data.playlist;\n        storeReducer({\n          type: GlobalStoreActionType.SET_CURRENT_LIST,\n          payload: playlist\n        });\n      }\n    }\n    asyncSetCurrentList(id);\n    history.push(\"/playlist/635f203d2e072037af2e6284\");\n  };\n  store.addComment = function (comment) {\n    let list = store.playingList;\n    list.comments.push({\n      postedBy: auth.user.firstName + ' ' + auth.user.lastName,\n      comment: comment\n    });\n    // NOW MAKE IT OFFICIAL\n    store.updatePlayingList();\n  };\n\n  // THESE ARE THE FUNCTIONS THAT WILL UPDATE OUR STORE AND\n  // DRIVE THE STATE OF THE APPLICATION. WE'LL CALL THESE IN \n  // RESPONSE TO EVENTS INSIDE OUR COMPONENTS.\n\n  // THIS FUNCTION PROCESSES CHANGING A LIST NAME\n  store.changeListName = function (id, newName) {\n    // GET THE LIST\n    async function asyncPlaylistExists(newName) {\n      let response = await api.getPlaylistByName(newName);\n      if (response.data.success) {\n        async function asyncChangeListName(id) {\n          let response = await api.getPlaylistById(id);\n          if (response.data.success) {\n            let playlist = response.data.playlist;\n            playlist.name = newName;\n            async function updateList(playlist) {\n              response = await api.updatePlaylistById(playlist._id, playlist);\n              if (response.data.success) {\n                async function getListPairs(playlist) {\n                  response = await api.getPlaylistPairs(store.searchValue);\n                  if (response.data.success) {\n                    let pairsArray = response.data.idNamePairs;\n                    storeReducer({\n                      type: GlobalStoreActionType.CHANGE_LIST_NAME,\n                      payload: {\n                        idNamePairs: pairsArray,\n                        playlist: playlist\n                      }\n                    });\n                    store.loadIdNamePairs();\n                  }\n                }\n                getListPairs(playlist);\n              }\n            }\n            updateList(playlist);\n          }\n        }\n        asyncChangeListName(id);\n      } else {\n        console.log(response.data.message);\n      }\n    }\n    asyncPlaylistExists(newName);\n  };\n\n  // THIS FUNCTION PROCESSES CLOSING THE CURRENTLY LOADED LIST\n  store.closeCurrentList = function () {\n    storeReducer({\n      type: GlobalStoreActionType.CLOSE_CURRENT_LIST,\n      payload: {}\n    });\n    tps.clearAllTransactions();\n    history.push(\"/\");\n  };\n\n  // THIS FUNCTION CREATES A NEW LIST\n  store.createNewList = async function () {\n    let newListName = \"Untitled 0\";\n    const response = await api.createPlaylist(newListName, auth.user.email, auth.user.firstName + ' ' + auth.user.lastName, [], [], [], [], \"no\", 0);\n    console.log(\"createNewList response: \" + response);\n    if (response.status === 201) {\n      tps.clearAllTransactions();\n      let newList = response.data.playlist;\n      storeReducer({\n        type: GlobalStoreActionType.CREATE_NEW_LIST\n      });\n      history.push(\"/\");\n      store.loadIdNamePairs();\n    } else {\n      console.log(\"API FAILED TO CREATE A NEW LIST\");\n    }\n  };\n  store.sortListsBy = function (sortBy) {\n    storeReducer({\n      type: GlobalStoreActionType.CHANGE_SORT_TYPE,\n      payload: sortBy\n    });\n    console.log(sortBy);\n    console.log(store);\n    if (store.searchBy === null) {\n      store.loadIdNamePairs(sortBy);\n    } else {\n      store.allPlaylists(store.searchBy, store.searchValue, sortBy);\n    }\n    console.log(store.sortBy);\n  };\n  store.myPlaylists = function (s) {\n    async function asyncLoadIdNamePairs() {\n      const response = await api.getPlaylistPairs(s);\n      if (response.data.success) {\n        let pairsArray = response.data.idNamePairs;\n        console.log(pairsArray);\n        storeReducer({\n          type: GlobalStoreActionType.GO_TO_MY_PLAYLISTS,\n          payload: {\n            playlists: pairsArray,\n            search: null,\n            searchValue: s,\n            sortBy: store.sortBy\n          }\n        });\n      } else {\n        console.log(\"API FAILED TO GET THE LIST PAIRS\");\n      }\n    }\n    asyncLoadIdNamePairs();\n  };\n\n  //flag is true if search playlist by playlistname, flag is false if search playlist by username of user who published the playlist.\n  store.allPlaylists = function (flag, searchValue, sortBy) {\n    if (sortBy === undefined) {\n      sortBy = store.sortBy;\n    }\n    console.log(flag + \"    \" + searchValue);\n    async function asyncLoadIdNamePairs() {\n      const response = await api.getPlaylists(flag, searchValue);\n      console.log(\"ffffffffff\");\n      if (response.data.success) {\n        console.log(\"ffffffffffffffffff\");\n        let pairsArray = response.data.idNamePairs;\n        if (sortBy !== null) {\n          pairsArray.sort(sortBy);\n        }\n        storeReducer({\n          type: GlobalStoreActionType.GO_TO_MY_PLAYLISTS,\n          payload: {\n            playlists: pairsArray,\n            search: flag,\n            searchValue: searchValue,\n            sortBy: sortBy\n          }\n        });\n      } else {\n        console.log(\"API FAILED TO GET THE LIST PAIRS\");\n      }\n    }\n    asyncLoadIdNamePairs();\n  };\n\n  // THIS FUNCTION LOADS ALL THE ID, NAME PAIRS SO WE CAN LIST ALL THE LISTS\n  store.loadIdNamePairs = function (sortBy) {\n    async function asyncLoadIdNamePairs() {\n      const response = await api.getPlaylistPairs(store.searchValue);\n      if (response.data.success) {\n        let pairsArray = response.data.idNamePairs;\n        console.log(pairsArray);\n        if (store.sortBy !== null) {\n          pairsArray.sort(store.sortBy);\n        }\n        if (sortBy !== undefined && sortBy !== null) {\n          pairsArray.sort(sortBy);\n        }\n        console.log(pairsArray);\n        storeReducer({\n          type: GlobalStoreActionType.LOAD_ID_NAME_PAIRS,\n          payload: {\n            playlists: pairsArray,\n            sortType: sortBy\n          }\n        });\n      } else {\n        console.log(\"API FAILED TO GET THE LIST PAIRS\");\n      }\n    }\n    asyncLoadIdNamePairs();\n  };\n  store.setPlayingList = function (id) {\n    async function asyncSetPlayingList(id) {\n      let response = await api.getPlaylistById(id);\n      if (response.data.success) {\n        let playlist = response.data.playlist;\n        if (playlist.published !== \"no\") {\n          playlist.listens++;\n          response = await api.updatePlaylistById(playlist._id, playlist);\n          if (response.data.success) {\n            if (store.searchBy === null) {\n              response = await api.getPlaylistPairs(store.searchValue);\n              if (response.data.success) {\n                let pairsArray = response.data.idNamePairs;\n                if (store.sortBy !== null) {\n                  pairsArray.sort(store.sortBy);\n                }\n                console.log(\"PAIRS ARRAY:  : : : :: : : : ::  :: : :: : : : ::  : : :: : : :: : : ::  \" + pairsArray);\n                storeReducer({\n                  type: GlobalStoreActionType.SET_PLAYING_LIST,\n                  payload: {\n                    playingList: playlist,\n                    playlists: pairsArray\n                  }\n                });\n                console.log(store.idNamePairs);\n              }\n            } else {\n              response = await api.getPlaylists(store.searchBy, store.searchValue);\n              if (response.data.success) {\n                let pairsArray = response.data.idNamePairs;\n                if (store.sortBy !== null) {\n                  pairsArray.sort(store.sortBy);\n                }\n                console.log(\"PAIRS ARRAY:  : : : :: : : : ::  :: : :: : : : ::  : : :: : : :: : : ::  \" + pairsArray);\n                storeReducer({\n                  type: GlobalStoreActionType.SET_PLAYING_LIST,\n                  payload: {\n                    playingList: playlist,\n                    playlists: pairsArray\n                  }\n                });\n                console.log(store.idNamePairs);\n              }\n            }\n          }\n        } else {\n          storeReducer({\n            type: GlobalStoreActionType.SET_PLAYING_LIST,\n            payload: {\n              playingList: playlist,\n              playlists: store.idNamePairs\n            }\n          });\n        }\n      }\n    }\n    asyncSetPlayingList(id);\n  };\n\n  // THE FOLLOWING 5 FUNCTIONS ARE FOR COORDINATING THE DELETION\n  // OF A LIST, WHICH INCLUDES USING A VERIFICATION MODAL. THE\n  // FUNCTIONS ARE markListForDeletion, deleteList, deleteMarkedList,\n  // showDeleteListModal, and hideDeleteListModal\n  store.markListForDeletion = function (id) {\n    async function getListToDelete(id) {\n      let response = await api.getPlaylistById(id);\n      if (response.data.success) {\n        let playlist = response.data.playlist;\n        storeReducer({\n          type: GlobalStoreActionType.MARK_LIST_FOR_DELETION,\n          payload: {\n            id: id,\n            playlist: playlist\n          }\n        });\n      }\n    }\n    getListToDelete(id);\n  };\n  store.deleteList = function (id) {\n    async function processDelete(id) {\n      let response = await api.deletePlaylistById(id);\n      store.loadIdNamePairs();\n      if (response.data.success) {\n        history.push(\"/\");\n      }\n    }\n    processDelete(id);\n  };\n  store.deleteMarkedList = function () {\n    store.deleteList(store.listIdMarkedForDeletion);\n    store.hideModals();\n  };\n  store.publishPlaylist = function (id) {\n    async function pub(id) {\n      let response = await api.getPlaylistById(id);\n      if (response.data.success) {\n        let playlist = response.data.playlist;\n        playlist.published = new Date();\n        response = await api.updatePlaylistById(playlist._id, playlist);\n        store.loadIdNamePairs(store.sortBy);\n      }\n    }\n    pub(id);\n  };\n  store.duplicatePlaylist = function (id) {\n    async function dup(id) {\n      let response = await api.getPlaylistById(id);\n      if (response.data.success) {\n        let playlist = response.data.playlist;\n        response = await api.createPlaylist(\"Copy of \" + playlist.name, auth.user.email, auth.user.firstName + ' ' + auth.user.lastName, playlist.songs, [], [], [], \"no\", 0);\n        console.log(\"createNewList response: \" + response);\n        if (response.status === 201) {\n          history.push(\"/\");\n          if (store.searchBy === null) {\n            store.loadIdNamePairs();\n          }\n        }\n      }\n    }\n    dup(id);\n  };\n\n  // THIS FUNCTION SHOWS THE MODAL FOR PROMPTING THE USER\n  // TO SEE IF THEY REALLY WANT TO DELETE THE LIST\n\n  store.showEditSongModal = (songIndex, songToEdit) => {\n    storeReducer({\n      type: GlobalStoreActionType.EDIT_SONG,\n      payload: {\n        currentSongIndex: songIndex,\n        currentSong: songToEdit\n      }\n    });\n  };\n  store.showRemoveSongModal = (songIndex, songToRemove) => {\n    storeReducer({\n      type: GlobalStoreActionType.REMOVE_SONG,\n      payload: {\n        currentSongIndex: songIndex,\n        currentSong: songToRemove\n      }\n    });\n  };\n  store.hideModals = () => {\n    auth.errorMessage = null;\n    storeReducer({\n      type: GlobalStoreActionType.HIDE_MODALS,\n      payload: {}\n    });\n  };\n  store.isDeleteListModalOpen = () => {\n    return store.currentModal === CurrentModal.DELETE_LIST;\n  };\n  store.isEditSongModalOpen = () => {\n    return store.currentModal === CurrentModal.EDIT_SONG;\n  };\n  store.isRemoveSongModalOpen = () => {\n    return store.currentModal === CurrentModal.REMOVE_SONG;\n  };\n  store.isErrorModalOpen = () => {\n    return store.currentModal === CurrentModal.ERROR;\n  };\n  store.like = function (id, bool) {\n    async function asyncGetList(id) {\n      let response = await api.getPlaylistById(id);\n      if (response.data.success) {\n        let playlist = response.data.playlist;\n        if (bool) {\n          playlist.likes.push(auth.user.email);\n        } else {\n          playlist.dislikes.push(auth.user.email);\n        }\n        response = await api.updatePlaylistById(playlist._id, playlist);\n        if (response.data.success) {\n          console.log(\"liked\");\n          console.log(store.searchBy);\n          if (store.searchBy === null) {\n            console.log(\"LIKED/DISLIKED OWN PLAYLIST\");\n            store.loadIdNamePairs(store.sortBy);\n          } else {\n            console.log(\"LIKING/DISLIKING A PLAYLIST ON SEARCHING PAGES\");\n            store.allPlaylists(store.searchBy, store.searchValue);\n          }\n        }\n      }\n    }\n    asyncGetList(id);\n  };\n\n  // THE FOLLOWING 8 FUNCTIONS ARE FOR COORDINATING THE UPDATING\n  // OF A LIST, WHICH INCLUDES DEALING WITH THE TRANSACTION STACK. THE\n  // FUNCTIONS ARE setCurrentList, addMoveItemTransaction, addUpdateItemTransaction,\n  // moveItem, updateItem, updateCurrentList, undo, and redo\n  store.setCurrentList = function (id) {\n    async function asyncSetCurrentList(id) {\n      let response = await api.getPlaylistById(id);\n      if (response.data.success) {\n        let playlist = response.data.playlist;\n        response = await api.updatePlaylistById(playlist._id, playlist);\n        if (response.data.success) {\n          storeReducer({\n            type: GlobalStoreActionType.SET_CURRENT_LIST,\n            payload: playlist\n          });\n        }\n      }\n    }\n    asyncSetCurrentList(id);\n  };\n  store.getPlaylistSize = function () {\n    return store.currentList.songs.length;\n  };\n  store.addNewSong = function () {\n    let index = this.getPlaylistSize();\n    this.addCreateSongTransaction(index, \"Untitled\", \"?\", \"dQw4w9WgXcQ\");\n  };\n  // THIS FUNCTION CREATES A NEW SONG IN THE CURRENT LIST\n  // USING THE PROVIDED DATA AND PUTS THIS SONG AT INDEX\n  store.createSong = function (index, song) {\n    let list = store.currentList;\n    list.songs.splice(index, 0, song);\n    // NOW MAKE IT OFFICIAL\n    store.updateCurrentList();\n  };\n  // THIS FUNCTION MOVES A SONG IN THE CURRENT LIST FROM\n  // start TO end AND ADJUSTS ALL OTHER ITEMS ACCORDINGLY\n  store.moveSong = function (start, end) {\n    let list = store.currentList;\n\n    // WE NEED TO UPDATE THE STATE FOR THE APP\n    if (start < end) {\n      let temp = list.songs[start];\n      for (let i = start; i < end; i++) {\n        list.songs[i] = list.songs[i + 1];\n      }\n      list.songs[end] = temp;\n    } else if (start > end) {\n      let temp = list.songs[start];\n      for (let i = start; i > end; i--) {\n        list.songs[i] = list.songs[i - 1];\n      }\n      list.songs[end] = temp;\n    }\n\n    // NOW MAKE IT OFFICIAL\n    store.updateCurrentList();\n  };\n  // THIS FUNCTION REMOVES THE SONG AT THE index LOCATION\n  // FROM THE CURRENT LIST\n  store.removeSong = function (index) {\n    let list = store.currentList;\n    list.songs.splice(index, 1);\n\n    // NOW MAKE IT OFFICIAL\n    store.updateCurrentList();\n  };\n  // THIS FUNCTION UPDATES THE TEXT IN THE ITEM AT index TO text\n  store.updateSong = function (index, songData) {\n    let list = store.currentList;\n    let song = list.songs[index];\n    song.title = songData.title;\n    song.artist = songData.artist;\n    song.youTubeId = songData.youTubeId;\n\n    // NOW MAKE IT OFFICIAL\n    store.updateCurrentList();\n  };\n  store.addNewSong = () => {\n    let playlistSize = store.getPlaylistSize();\n    store.addCreateSongTransaction(playlistSize, \"Untitled\", \"?\", \"dQw4w9WgXcQ\");\n  };\n  // THIS FUNCDTION ADDS A CreateSong_Transaction TO THE TRANSACTION STACK\n  store.addCreateSongTransaction = (index, title, artist, youTubeId) => {\n    // ADD A SONG ITEM AND ITS NUMBER\n    let song = {\n      title: title,\n      artist: artist,\n      youTubeId: youTubeId\n    };\n    let transaction = new CreateSong_Transaction(store, index, song);\n    tps.addTransaction(transaction);\n  };\n  store.addMoveSongTransaction = function (start, end) {\n    let transaction = new MoveSong_Transaction(store, start, end);\n    tps.addTransaction(transaction);\n  };\n  // THIS FUNCTION ADDS A RemoveSong_Transaction TO THE TRANSACTION STACK\n  store.addRemoveSongTransaction = () => {\n    let index = store.currentSongIndex;\n    let song = store.currentList.songs[index];\n    let transaction = new RemoveSong_Transaction(store, index, song);\n    tps.addTransaction(transaction);\n  };\n  store.addUpdateSongTransaction = function (index, newSongData) {\n    let song = store.currentList.songs[index];\n    let oldSongData = {\n      title: song.title,\n      artist: song.artist,\n      youTubeId: song.youTubeId\n    };\n    let transaction = new UpdateSong_Transaction(this, index, oldSongData, newSongData);\n    tps.addTransaction(transaction);\n  };\n  store.updateCurrentList = function () {\n    async function asyncUpdateCurrentList() {\n      const response = await api.updatePlaylistById(store.currentList._id, store.currentList);\n      if (response.data.success) {\n        storeReducer({\n          type: GlobalStoreActionType.SET_CURRENT_LIST,\n          payload: store.currentList\n        });\n      }\n    }\n    asyncUpdateCurrentList();\n  };\n  store.updatePlayingList = function () {\n    async function asyncUpdateCurrentList() {\n      const response = await api.updatePlaylistById(store.playingList._id, store.playingList);\n      if (response.data.success) {\n        storeReducer({\n          type: GlobalStoreActionType.SET_PLAYING_LIST,\n          payload: {\n            playingList: store.playingList,\n            playlists: store.idNamePairs\n          }\n        });\n      }\n    }\n    asyncUpdateCurrentList();\n  };\n  store.undo = function () {\n    tps.undoTransaction();\n  };\n  store.redo = function () {\n    tps.doTransaction();\n  };\n  store.canAddNewSong = function () {\n    return store.currentList !== null;\n  };\n  store.canUndo = function () {\n    return store.currentList !== null && tps.hasTransactionToUndo();\n  };\n  store.canRedo = function () {\n    return store.currentList !== null && tps.hasTransactionToRedo();\n  };\n  store.canClose = function () {\n    return store.currentList !== null;\n  };\n\n  // THIS FUNCTION ENABLES THE PROCESS OF EDITING A LIST NAME\n  store.setIsListNameEditActive = function () {\n    storeReducer({\n      type: GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE,\n      payload: null\n    });\n  };\n  store.rerender = function () {\n    setStore({\n      currentModal: store.currentModal,\n      idNamePairs: store.idNamePairs,\n      currentList: store.currentList,\n      currentSongIndex: store.currentSongIndex,\n      currentSong: store.currentSong,\n      listNameActive: store.listNameActive,\n      listIdMarkedForDeletion: store.listIdMarkedForDeletion,\n      listMarkedForDeletion: store.listMarkedForDeletion\n    });\n  };\n  function KeyPress(event) {\n    if (!store.modalOpen && event.ctrlKey) {\n      if (event.key === 'z') {\n        store.undo();\n      }\n      if (event.key === 'y') {\n        store.redo();\n      }\n    }\n  }\n  document.onkeydown = event => KeyPress(event);\n  return /*#__PURE__*/_jsxDEV(GlobalStoreContext.Provider, {\n    value: {\n      store\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 881,\n    columnNumber: 9\n  }, this);\n}\n_s(GlobalStoreContextProvider, \"h9B0hBY6rZ2wjSMWcZFShdden9U=\", false, function () {\n  return [useHistory];\n});\n_c = GlobalStoreContextProvider;\nexport default GlobalStoreContext;\nexport { GlobalStoreContextProvider };\nvar _c;\n$RefreshReg$(_c, \"GlobalStoreContextProvider\");","map":{"version":3,"names":["createContext","useContext","useState","useHistory","jsTPS","api","CreateSong_Transaction","MoveSong_Transaction","RemoveSong_Transaction","UpdateSong_Transaction","AuthContext","GlobalStoreContext","console","log","GlobalStoreActionType","CHANGE_LIST_NAME","CLOSE_CURRENT_LIST","CREATE_NEW_LIST","LOAD_ID_NAME_PAIRS","MARK_LIST_FOR_DELETION","SET_CURRENT_LIST","SET_PLAYING_LIST","SET_LIST_NAME_EDIT_ACTIVE","EDIT_SONG","REMOVE_SONG","HIDE_MODALS","CHANGE_SORT_TYPE","GO_TO_MY_PLAYLISTS","tps","CurrentModal","NONE","DELETE_LIST","ERROR","GlobalStoreContextProvider","props","store","setStore","currentModal","idNamePairs","currentList","playingList","listBeingPlayed","currentSongIndex","currentSong","newListCounter","listNameActive","listIdMarkedForDeletion","listMarkedForDeletion","sortBy","searchBy","auth","user","searchValue","history","storeReducer","action","type","payload","newListName","playlist","playlists","sortType","id","search","enterGuestMode","loginUser","tryAcessingOtherAccountPlaylist","asyncSetCurrentList","response","getPlaylistById","data","success","push","addComment","comment","list","comments","postedBy","firstName","lastName","updatePlayingList","changeListName","newName","asyncPlaylistExists","getPlaylistByName","asyncChangeListName","name","updateList","updatePlaylistById","_id","getListPairs","getPlaylistPairs","pairsArray","loadIdNamePairs","message","closeCurrentList","clearAllTransactions","createNewList","createPlaylist","email","status","newList","sortListsBy","allPlaylists","myPlaylists","s","asyncLoadIdNamePairs","flag","undefined","getPlaylists","sort","setPlayingList","asyncSetPlayingList","published","listens","markListForDeletion","getListToDelete","deleteList","processDelete","deletePlaylistById","deleteMarkedList","hideModals","publishPlaylist","pub","Date","duplicatePlaylist","dup","songs","showEditSongModal","songIndex","songToEdit","showRemoveSongModal","songToRemove","errorMessage","isDeleteListModalOpen","isEditSongModalOpen","isRemoveSongModalOpen","isErrorModalOpen","like","bool","asyncGetList","likes","dislikes","setCurrentList","getPlaylistSize","length","addNewSong","index","addCreateSongTransaction","createSong","song","splice","updateCurrentList","moveSong","start","end","temp","i","removeSong","updateSong","songData","title","artist","youTubeId","playlistSize","transaction","addTransaction","addMoveSongTransaction","addRemoveSongTransaction","addUpdateSongTransaction","newSongData","oldSongData","asyncUpdateCurrentList","undo","undoTransaction","redo","doTransaction","canAddNewSong","canUndo","hasTransactionToUndo","canRedo","hasTransactionToRedo","canClose","setIsListNameEditActive","rerender","KeyPress","event","modalOpen","ctrlKey","key","document","onkeydown","children"],"sources":["/Users/mikeybudney/Desktop/CSE316FINALPROJECT/client/src/store/index.js"],"sourcesContent":["import { createContext, useContext, useState } from 'react'\nimport { useHistory } from 'react-router-dom'\nimport jsTPS from '../common/jsTPS'\nimport api from './store-request-api'\nimport CreateSong_Transaction from '../transactions/CreateSong_Transaction'\nimport MoveSong_Transaction from '../transactions/MoveSong_Transaction'\nimport RemoveSong_Transaction from '../transactions/RemoveSong_Transaction'\nimport UpdateSong_Transaction from '../transactions/UpdateSong_Transaction'\nimport AuthContext from '../auth'\n//import YouTubePlayerExample from '../YouTubePlaylisterReact'\n\n/*\n    This is our global data store. Note that it uses the Flux design pattern,\n    which makes use of things like actions and reducers. \n    \n    @author McKilla Gorilla\n*/\n\n// THIS IS THE CONTEXT WE'LL USE TO SHARE OUR STORE\nexport const GlobalStoreContext = createContext({});\nconsole.log(\"create GlobalStoreContext\");\n\n// THESE ARE ALL THE TYPES OF UPDATES TO OUR GLOBAL\n// DATA STORE STATE THAT CAN BE PROCESSED\nexport const GlobalStoreActionType = {\n    CHANGE_LIST_NAME: \"CHANGE_LIST_NAME\",\n    CLOSE_CURRENT_LIST: \"CLOSE_CURRENT_LIST\",\n    CREATE_NEW_LIST: \"CREATE_NEW_LIST\",\n    LOAD_ID_NAME_PAIRS: \"LOAD_ID_NAME_PAIRS\",\n    MARK_LIST_FOR_DELETION: \"MARK_LIST_FOR_DELETION\",\n    SET_CURRENT_LIST: \"SET_CURRENT_LIST\",\n    SET_PLAYING_LIST: \"SET_PLAYING_LIST\",\n    SET_LIST_NAME_EDIT_ACTIVE: \"SET_LIST_NAME_EDIT_ACTIVE\",\n    EDIT_SONG: \"EDIT_SONG\",\n    REMOVE_SONG: \"REMOVE_SONG\",\n    HIDE_MODALS: \"HIDE_MODALS\",\n    CHANGE_SORT_TYPE: \"CHANGE_SORT_TYPE\",\n    GO_TO_MY_PLAYLISTS: \"GO_TO_MY_PLAYLISTS\"\n}\n\n// WE'LL NEED THIS TO PROCESS TRANSACTIONS\nconst tps = new jsTPS();\n\nconst CurrentModal = {\n    NONE : \"NONE\",\n    DELETE_LIST : \"DELETE_LIST\",\n    EDIT_SONG : \"EDIT_SONG\",\n    REMOVE_SONG : \"REMOVE_SONG\",\n    ERROR : \"ERROR\"\n}\n\n// WITH THIS WE'RE MAKING OUR GLOBAL DATA STORE\n// AVAILABLE TO THE REST OF THE APPLICATION\nfunction GlobalStoreContextProvider(props) {\n    // THESE ARE ALL THE THINGS OUR DATA STORE WILL MANAGE\n    const [store, setStore] = useState({\n        currentModal : CurrentModal.NONE,\n        idNamePairs: [],\n        currentList: null,\n        playingList : null,\n        listBeingPlayed: null,\n        currentSongIndex : -1,\n        currentSong : null,\n        newListCounter: 0,\n        listNameActive: false,\n        listIdMarkedForDeletion: null,\n        listMarkedForDeletion: null,\n        sortBy: null,\n        searchBy: auth.user === \"guest\"? true: null,\n        searchValue: \"\"\n    });\n    const history = useHistory();\n\n    console.log(\"inside useGlobalStore\");\n\n    // SINCE WE'VE WRAPPED THE STORE IN THE AUTH CONTEXT WE CAN ACCESS THE USER HERE\n    const { auth } = useContext(AuthContext);\n    console.log(\"auth: \" + auth);\n\n    // HERE'S THE DATA STORE'S REDUCER, IT MUST\n    // HANDLE EVERY TYPE OF STATE CHANGE\n    const storeReducer = (action) => {\n        const { type, payload } = action;\n        switch (type) {\n            // CHANGE SORT TYPE\n            case GlobalStoreActionType.CHANGE_SORT_TYPE: {\n                return setStore({\n                    currentModal : CurrentModal.NONE,\n                    idNamePairs: store.idNamePairs,\n                    currentList: store.currentList,\n                    playingList : store.playingList,\n                    currentSongIndex: store.currentSongIndex,\n                    currentSong: store.currentSong,\n                    listNameActive: store.newListName,\n                    listIdMarkedForDeletion: store.listIdMarkedForDeletion,\n                    listMarkedForDeletion: store.listMarkedForDeletion,\n                    sortBy: payload,\n                    searchBy: store.searchBy,\n                    searchValue: store.searchValue\n                });\n            }\n            // LIST UPDATE OF ITS NAME\n            case GlobalStoreActionType.CHANGE_LIST_NAME: {\n                console.log(\"SORT BY\" + store.sortBy);\n                return setStore({\n                    currentModal : CurrentModal.NONE,\n                    idNamePairs: payload.idNamePairs,\n                    currentList: payload.playlist,\n                    playingList : store.playingList,\n                    currentSongIndex: -1,\n                    currentSong: null,\n                    listNameActive: false,\n                    listIdMarkedForDeletion: null,\n                    listMarkedForDeletion: null,\n                    sortBy: store.sortBy,\n                    searchBy: store.searchBy,\n                    searchValue: store.searchValue\n                });\n            }\n            // STOP EDITING THE CURRENT LIST\n            case GlobalStoreActionType.CLOSE_CURRENT_LIST: {\n                return setStore({\n                    currentModal : CurrentModal.NONE,\n                    idNamePairs: store.idNamePairs,\n                    currentList: null,\n                    playingList : store.playingList,\n                    currentSongIndex: -1,\n                    currentSong: null,\n                    listNameActive: false,\n                    listIdMarkedForDeletion: null,\n                    listMarkedForDeletion: null,\n                    sortBy: store.sortBy,\n                    searchBy: store.searchBy,\n                    searchValue: store.searchValue\n                })\n            }\n            // CREATE A NEW LIST\n            case GlobalStoreActionType.CREATE_NEW_LIST: {                \n                return setStore({\n                    currentModal : CurrentModal.NONE,\n                    idNamePairs: store.idNamePairs,\n                    currentList: store.currentList,\n                    playingList : store.playingList,\n                    currentSongIndex: -1,\n                    currentSong: null,\n                    listNameActive: false,\n                    listIdMarkedForDeletion: null,\n                    listMarkedForDeletion: null,\n                    sortBy: store.sortBy,\n                    searchBy: null,\n                    searchValue: store.searchValue\n                })\n            }\n            // GET ALL THE LISTS SO WE CAN PRESENT THEM\n            case GlobalStoreActionType.LOAD_ID_NAME_PAIRS: {\n                console.log(\"LOAD_ID_NAME_PAIRS setStore is being done!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\");\n                return setStore({\n                    currentModal : CurrentModal.NONE,\n                    idNamePairs: payload.playlists,\n                    currentList: null,\n                    playingList : store.playingList,\n                    currentSongIndex: -1,\n                    currentSong: null,\n                    listNameActive: false,\n                    listIdMarkedForDeletion: null,\n                    listMarkedForDeletion: null,\n                    sortBy: payload.sortType,\n                    searchBy: store.searchBy,\n                    searchValue: store.searchValue\n                });\n            }\n            // PREPARE TO DELETE A LIST\n            case GlobalStoreActionType.MARK_LIST_FOR_DELETION: {\n                return setStore({\n                    currentModal : CurrentModal.DELETE_LIST,\n                    idNamePairs: store.idNamePairs,\n                    currentList: null,\n                    playingList : store.playingList,\n                    currentSongIndex: -1,\n                    currentSong: null,\n                    listNameActive: false,\n                    listIdMarkedForDeletion: payload.id,\n                    listMarkedForDeletion: payload.playlist,\n                    sortBy: store.sortBy,\n                    searchBy: store.searchBy,\n                    searchValue: store.searchValue\n                });\n            }\n            // UPDATE CURRENT LIST\n            case GlobalStoreActionType.SET_CURRENT_LIST: {\n                return setStore({\n                    currentModal : CurrentModal.NONE,\n                    idNamePairs: store.idNamePairs,\n                    currentList: payload,\n                    playingList : store.playingList,\n                    currentSongIndex: -1,\n                    currentSong: null,\n                    listNameActive: false,\n                    listIdMarkedForDeletion: null,\n                    listMarkedForDeletion: null,\n                    sortBy: store.sortBy,\n                    searchBy: store.searchBy,\n                    searchValue: store.searchValue\n                });\n            }\n             // UPDATE PLAYING LIST\n             case GlobalStoreActionType.SET_PLAYING_LIST: {\n                console.log(\"SET_PLAYING_LIST setStore is being done!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\");\n                return setStore({\n                    currentModal : CurrentModal.NONE,\n                    idNamePairs: payload.playlists,\n                    currentList: store.currentList,\n                    playingList : payload.playingList,\n                    currentSongIndex: store.currentSongIndex,\n                    currentSong: store.currentSong,\n                    listNameActive: store.newListName,\n                    listIdMarkedForDeletion: store.listIdMarkedForDeletion,\n                    listMarkedForDeletion: store.listMarkedForDeletion,\n                    sortBy: store.sortBy,\n                    searchBy: store.searchBy,\n                    searchValue: store.searchValue\n                });\n            }\n            // START EDITING A LIST NAME\n            case GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE: {\n                return setStore({\n                    currentModal : CurrentModal.NONE,\n                    idNamePairs: store.idNamePairs,\n                    currentList: payload,\n                    playingList : store.playingList,\n                    currentSongIndex: -1,\n                    currentSong: null,\n                    listNameActive: true,\n                    listIdMarkedForDeletion: null,\n                    listMarkedForDeletion: null,\n                    sortBy: store.sortBy,\n                    searchBy: null,\n                    searchValue: store.searchValue\n                });\n            }\n            // \n            case GlobalStoreActionType.EDIT_SONG: {\n                return setStore({\n                    currentModal : CurrentModal.EDIT_SONG,\n                    idNamePairs: store.idNamePairs,\n                    currentList: store.currentList,\n                    playingList : store.playingList,\n                    currentSongIndex: payload.currentSongIndex,\n                    currentSong: payload.currentSong,\n                    listNameActive: false,\n                    listIdMarkedForDeletion: null,\n                    listMarkedForDeletion: null,\n                    sortBy: store.sortBy,\n                    searchBy: null,\n                    searchValue: store.searchValue\n                });\n            }\n            case GlobalStoreActionType.REMOVE_SONG: {\n                return setStore({\n                    currentModal : CurrentModal.REMOVE_SONG,\n                    idNamePairs: store.idNamePairs,\n                    currentList: store.currentList,\n                    playingList : store.playingList,\n                    currentSongIndex: payload.currentSongIndex,\n                    currentSong: payload.currentSong,\n                    listNameActive: false,\n                    listIdMarkedForDeletion: null,\n                    listMarkedForDeletion: null,\n                    sortBy: store.sortBy,\n                    searchBy: null,\n                    searchValue: store.searchValue\n                });\n            }\n            case GlobalStoreActionType.HIDE_MODALS: {\n                return setStore({\n                    currentModal : CurrentModal.NONE,\n                    idNamePairs: store.idNamePairs,\n                    currentList: store.currentList,\n                    playingList : store.playingList,\n                    currentSongIndex: -1,\n                    currentSong: null,\n                    listNameActive: false,\n                    listIdMarkedForDeletion: null,\n                    listMarkedForDeletion: null,\n                    sortBy: store.sortBy,\n                    searchBy: store.searchBy,\n                    searchValue: store.searchValue\n                });\n            }\n            case GlobalStoreActionType.GO_TO_MY_PLAYLISTS: {\n                console.log(\"going to your playlists  going to your playlists  going to your playlists  going to your playlists\")\n                return setStore({\n                    currentModal : CurrentModal.NONE,\n                    idNamePairs: payload.playlists,\n                    currentList: null,\n                    playingList : store.playingList,\n                    currentSongIndex: store.currentSongIndex,\n                    currentSong: store.currentSong,\n                    listNameActive: store.newListName,\n                    listIdMarkedForDeletion: store.listIdMarkedForDeletion,\n                    listMarkedForDeletion: store.listMarkedForDeletion,\n                    sortBy: payload.sortBy,\n                    searchBy: payload.search,\n                    searchValue: payload.searchValue\n                });\n            }\n\n            default:\n                return store;\n        }\n    }\n\n    store.enterGuestMode = function (){\n        auth.loginUser(\"guest\", \"p\");\n    }\n\n    store.tryAcessingOtherAccountPlaylist = function(){\n        let id = \"635f203d2e072037af2e6284\";\n        async function asyncSetCurrentList(id) {\n            let response = await api.getPlaylistById(id);\n            if (response.data.success) {\n                let playlist = response.data.playlist;\n                storeReducer({\n                    type: GlobalStoreActionType.SET_CURRENT_LIST,\n                    payload: playlist\n                });\n            }\n        }\n        asyncSetCurrentList(id);\n        history.push(\"/playlist/635f203d2e072037af2e6284\");\n    }\n\n    store.addComment = function(comment){\n        let list = store.playingList;      \n        list.comments.push({postedBy: auth.user.firstName + ' ' + auth.user.lastName, comment: comment})\n        // NOW MAKE IT OFFICIAL\n        store.updatePlayingList();\n    }\n    \n    // THESE ARE THE FUNCTIONS THAT WILL UPDATE OUR STORE AND\n    // DRIVE THE STATE OF THE APPLICATION. WE'LL CALL THESE IN \n    // RESPONSE TO EVENTS INSIDE OUR COMPONENTS.\n\n    // THIS FUNCTION PROCESSES CHANGING A LIST NAME\n    store.changeListName = function (id, newName) {\n        // GET THE LIST\n        async function asyncPlaylistExists(newName){\n            let response = await api.getPlaylistByName(newName);\n            if(response.data.success){\n        async function asyncChangeListName(id) {\n            let response = await api.getPlaylistById(id);\n            if (response.data.success) {\n                let playlist = response.data.playlist;\n                playlist.name = newName;\n                async function updateList(playlist) {\n                    response = await api.updatePlaylistById(playlist._id, playlist);\n                    if (response.data.success) {\n                        async function getListPairs(playlist) {\n                            response = await api.getPlaylistPairs(store.searchValue);\n                            if (response.data.success) {\n                                let pairsArray = response.data.idNamePairs;\n                                storeReducer({\n                                    type: GlobalStoreActionType.CHANGE_LIST_NAME,\n                                    payload: {\n                                        idNamePairs: pairsArray,\n                                        playlist: playlist\n                                    }\n                                });\n                                store.loadIdNamePairs();\n                            }\n                        }\n                        getListPairs(playlist);\n                    }\n                }\n                updateList(playlist);\n            }\n        }\n        asyncChangeListName(id);\n    } else{\n        console.log(response.data.message);\n    }\n    }\n    asyncPlaylistExists(newName)\n    }\n\n    // THIS FUNCTION PROCESSES CLOSING THE CURRENTLY LOADED LIST\n    store.closeCurrentList = function () {\n        storeReducer({\n            type: GlobalStoreActionType.CLOSE_CURRENT_LIST,\n            payload: {}\n        });\n        tps.clearAllTransactions();\n        history.push(\"/\");\n    }\n\n    // THIS FUNCTION CREATES A NEW LIST\n    store.createNewList = async function () {\n        let newListName = \"Untitled 0\";\n        const response = await api.createPlaylist(newListName, auth.user.email, auth.user.firstName + ' ' + auth.user.lastName, [], [], [], [], \"no\", 0);\n        console.log(\"createNewList response: \" + response);\n        if (response.status === 201) {\n            tps.clearAllTransactions();\n            let newList = response.data.playlist;\n            storeReducer({\n                type: GlobalStoreActionType.CREATE_NEW_LIST\n            }\n            );\n            history.push(\"/\");\n            store.loadIdNamePairs();\n        }\n        else {\n            console.log(\"API FAILED TO CREATE A NEW LIST\");\n        }\n    }\n\n    store.sortListsBy = function (sortBy) {\n        storeReducer({\n            type: GlobalStoreActionType.CHANGE_SORT_TYPE,\n            payload: sortBy\n        });\n        console.log(sortBy);\n        console.log(store);\n        if(store.searchBy===null){\n            store.loadIdNamePairs(sortBy);\n        } else {\n            store.allPlaylists(store.searchBy, store.searchValue, sortBy);\n        }\n        console.log(store.sortBy)\n    }\n\n    store.myPlaylists = function (s) {\n        async function asyncLoadIdNamePairs() {\n            const response = await api.getPlaylistPairs(s);\n            if (response.data.success) {\n                let pairsArray = response.data.idNamePairs;\n                console.log(pairsArray);\n                storeReducer({\n                    type: GlobalStoreActionType.GO_TO_MY_PLAYLISTS,\n                    payload: {playlists: pairsArray, search: null, searchValue: s, sortBy: store.sortBy}\n                });\n            }\n            else {\n                console.log(\"API FAILED TO GET THE LIST PAIRS\");\n            }\n        }\n        asyncLoadIdNamePairs();\n    }\n\n    //flag is true if search playlist by playlistname, flag is false if search playlist by username of user who published the playlist.\n    store.allPlaylists = function (flag, searchValue, sortBy) {\n        if(sortBy === undefined){\n            sortBy = store.sortBy\n        }\n        console.log(flag + \"    \" + searchValue);\n        async function asyncLoadIdNamePairs() {\n            const response = await api.getPlaylists(flag, searchValue);\n            console.log(\"ffffffffff\");\n            if (response.data.success) {\n                console.log(\"ffffffffffffffffff\");\n                let pairsArray = response.data.idNamePairs;\n                if(sortBy !== null){\n                    pairsArray.sort(sortBy);\n                }\n                storeReducer({\n                    type: GlobalStoreActionType.GO_TO_MY_PLAYLISTS,\n                    payload: {playlists: pairsArray, search: flag, searchValue: searchValue, sortBy: sortBy}\n                });\n            }\n            else {\n                console.log(\"API FAILED TO GET THE LIST PAIRS\");\n            }\n        }\n        asyncLoadIdNamePairs();\n    }\n\n\n    // THIS FUNCTION LOADS ALL THE ID, NAME PAIRS SO WE CAN LIST ALL THE LISTS\n    store.loadIdNamePairs = function (sortBy) {\n        async function asyncLoadIdNamePairs() {\n            const response = await api.getPlaylistPairs(store.searchValue);\n            if (response.data.success) {\n                let pairsArray = response.data.idNamePairs;\n                console.log(pairsArray);\n                if(store.sortBy !== null){\n                    pairsArray.sort(store.sortBy);\n                }\n                if(sortBy !== undefined && sortBy !== null){\n                    pairsArray.sort(sortBy);\n                }\n                console.log(pairsArray);\n                storeReducer({\n                    type: GlobalStoreActionType.LOAD_ID_NAME_PAIRS,\n                    payload: {playlists: pairsArray, sortType: sortBy}\n                });\n            }\n            else {\n                console.log(\"API FAILED TO GET THE LIST PAIRS\");\n            }\n        }\n        asyncLoadIdNamePairs();\n    }\n\n    store.setPlayingList = function (id) {\n        async function asyncSetPlayingList(id) {\n            let response = await api.getPlaylistById(id);\n            if (response.data.success) {\n                let playlist = response.data.playlist;\n                if(playlist.published!==\"no\"){\n                    playlist.listens++;\n                    response = await api.updatePlaylistById(playlist._id, playlist);\n                    if (response.data.success) {\n                        if(store.searchBy === null){\n                        response = await api.getPlaylistPairs(store.searchValue);\n                            if (response.data.success) {\n                                let pairsArray = response.data.idNamePairs;\n                                if(store.sortBy !== null){\n                                    pairsArray.sort(store.sortBy)\n                                }\n                                console.log(\"PAIRS ARRAY:  : : : :: : : : ::  :: : :: : : : ::  : : :: : : :: : : ::  \" + pairsArray);\n                                storeReducer({\n                                    type: GlobalStoreActionType.SET_PLAYING_LIST,\n                                    payload: {playingList: playlist, playlists: pairsArray}\n                                });\n                                console.log(store.idNamePairs);\n                            }\n                        } else {\n                            response = await api.getPlaylists(store.searchBy, store.searchValue);\n                            if (response.data.success) {\n                                let pairsArray = response.data.idNamePairs;\n                                if(store.sortBy !== null){\n                                    pairsArray.sort(store.sortBy)\n                                }\n                                console.log(\"PAIRS ARRAY:  : : : :: : : : ::  :: : :: : : : ::  : : :: : : :: : : ::  \" + pairsArray);\n                                storeReducer({\n                                    type: GlobalStoreActionType.SET_PLAYING_LIST,\n                                    payload: {playingList: playlist, playlists: pairsArray}\n                                });\n                                console.log(store.idNamePairs);\n                            }\n                        }\n                    }\n                } else {\n                    storeReducer({\n                        type: GlobalStoreActionType.SET_PLAYING_LIST,\n                        payload: {playingList: playlist, playlists: store.idNamePairs}\n                    });\n                }\n            }\n        }\n        asyncSetPlayingList(id);\n    }\n    \n\n\n    // THE FOLLOWING 5 FUNCTIONS ARE FOR COORDINATING THE DELETION\n    // OF A LIST, WHICH INCLUDES USING A VERIFICATION MODAL. THE\n    // FUNCTIONS ARE markListForDeletion, deleteList, deleteMarkedList,\n    // showDeleteListModal, and hideDeleteListModal\n    store.markListForDeletion = function (id) {\n        async function getListToDelete(id) {\n            let response = await api.getPlaylistById(id);\n            if (response.data.success) {\n                let playlist = response.data.playlist;\n                storeReducer({\n                    type: GlobalStoreActionType.MARK_LIST_FOR_DELETION,\n                    payload: {id: id, playlist: playlist}\n                });\n            }\n        }\n        getListToDelete(id);\n    }\n    store.deleteList = function (id) {\n        async function processDelete(id) {\n            let response = await api.deletePlaylistById(id);\n            store.loadIdNamePairs();\n            if (response.data.success) {\n                history.push(\"/\");\n            }\n        }\n        processDelete(id);\n    }\n    store.deleteMarkedList = function() {\n        store.deleteList(store.listIdMarkedForDeletion);\n        store.hideModals();\n        \n    }\n\n    store.publishPlaylist = function(id) {\n        async function pub(id) {\n            let response = await api.getPlaylistById(id);\n            if (response.data.success) {\n                let playlist = response.data.playlist;\n                playlist.published = new Date();\n                response = await api.updatePlaylistById(playlist._id, playlist);\n                store.loadIdNamePairs(store.sortBy);\n            }\n        }\n        pub(id);\n    }\n    store.duplicatePlaylist = function(id) {\n        async function dup(id) {\n            let response = await api.getPlaylistById(id);\n            if (response.data.success) {\n                let playlist = response.data.playlist;\n                response = await api.createPlaylist(\"Copy of \"+playlist.name, auth.user.email, auth.user.firstName + ' ' + auth.user.lastName, playlist.songs, [], [], [], \"no\", 0);\n                console.log(\"createNewList response: \" + response);\n                if (response.status === 201) {\n                    history.push(\"/\");\n                    if(store.searchBy === null){\n                        store.loadIdNamePairs();\n                    }\n                }\n            }\n        }\n        dup(id);\n    }\n\n\n    // THIS FUNCTION SHOWS THE MODAL FOR PROMPTING THE USER\n    // TO SEE IF THEY REALLY WANT TO DELETE THE LIST\n\n    store.showEditSongModal = (songIndex, songToEdit) => {\n        storeReducer({\n            type: GlobalStoreActionType.EDIT_SONG,\n            payload: {currentSongIndex: songIndex, currentSong: songToEdit}\n        });        \n    }\n    store.showRemoveSongModal = (songIndex, songToRemove) => {\n        storeReducer({\n            type: GlobalStoreActionType.REMOVE_SONG,\n            payload: {currentSongIndex: songIndex, currentSong: songToRemove}\n        });        \n    }\n    store.hideModals = () => {\n        auth.errorMessage = null;\n        storeReducer({\n            type: GlobalStoreActionType.HIDE_MODALS,\n            payload: {}\n        });    \n    }\n    store.isDeleteListModalOpen = () => {\n        return store.currentModal === CurrentModal.DELETE_LIST;\n    }\n    store.isEditSongModalOpen = () => {\n        return store.currentModal === CurrentModal.EDIT_SONG;\n    }\n    store.isRemoveSongModalOpen = () => {\n        return store.currentModal === CurrentModal.REMOVE_SONG;\n    }\n    store.isErrorModalOpen = () => {\n        return store.currentModal === CurrentModal.ERROR;\n    }\n\n    \n    store.like = function (id, bool){\n        async function asyncGetList(id) {\n            let response = await api.getPlaylistById(id);\n            if (response.data.success) {\n                let playlist = response.data.playlist;\n                if(bool){\n                    playlist.likes.push(auth.user.email);\n                } else {\n                    playlist.dislikes.push(auth.user.email);\n                }\n                response = await api.updatePlaylistById(playlist._id, playlist);\n                if (response.data.success) {\n                    console.log(\"liked\");\n                    console.log(store.searchBy);\n                    if(store.searchBy === null){\n                        console.log(\"LIKED/DISLIKED OWN PLAYLIST\");\n                        store.loadIdNamePairs(store.sortBy);\n                    } else {\n                        console.log(\"LIKING/DISLIKING A PLAYLIST ON SEARCHING PAGES\")\n                        store.allPlaylists(store.searchBy, store.searchValue);\n                    }\n                }\n            }\n        }\n        asyncGetList(id);\n    }\n\n    // THE FOLLOWING 8 FUNCTIONS ARE FOR COORDINATING THE UPDATING\n    // OF A LIST, WHICH INCLUDES DEALING WITH THE TRANSACTION STACK. THE\n    // FUNCTIONS ARE setCurrentList, addMoveItemTransaction, addUpdateItemTransaction,\n    // moveItem, updateItem, updateCurrentList, undo, and redo\n    store.setCurrentList = function (id) {\n        async function asyncSetCurrentList(id) {\n            let response = await api.getPlaylistById(id);\n            if (response.data.success) {\n                let playlist = response.data.playlist;\n\n                response = await api.updatePlaylistById(playlist._id, playlist);\n                if (response.data.success) {\n                    storeReducer({\n                        type: GlobalStoreActionType.SET_CURRENT_LIST,\n                        payload: playlist\n                    });\n                }\n            }\n        }\n        asyncSetCurrentList(id);\n    }\n\n    store.getPlaylistSize = function() {\n        return store.currentList.songs.length;\n    }\n    store.addNewSong = function() {\n        let index = this.getPlaylistSize();\n        this.addCreateSongTransaction(index, \"Untitled\", \"?\", \"dQw4w9WgXcQ\");\n    }\n    // THIS FUNCTION CREATES A NEW SONG IN THE CURRENT LIST\n    // USING THE PROVIDED DATA AND PUTS THIS SONG AT INDEX\n    store.createSong = function(index, song) {\n        let list = store.currentList;      \n        list.songs.splice(index, 0, song);\n        // NOW MAKE IT OFFICIAL\n        store.updateCurrentList();\n    }\n    // THIS FUNCTION MOVES A SONG IN THE CURRENT LIST FROM\n    // start TO end AND ADJUSTS ALL OTHER ITEMS ACCORDINGLY\n    store.moveSong = function(start, end) {\n        let list = store.currentList;\n\n        // WE NEED TO UPDATE THE STATE FOR THE APP\n        if (start < end) {\n            let temp = list.songs[start];\n            for (let i = start; i < end; i++) {\n                list.songs[i] = list.songs[i + 1];\n            }\n            list.songs[end] = temp;\n        }\n        else if (start > end) {\n            let temp = list.songs[start];\n            for (let i = start; i > end; i--) {\n                list.songs[i] = list.songs[i - 1];\n            }\n            list.songs[end] = temp;\n        }\n\n        // NOW MAKE IT OFFICIAL\n        store.updateCurrentList();\n    }\n    // THIS FUNCTION REMOVES THE SONG AT THE index LOCATION\n    // FROM THE CURRENT LIST\n    store.removeSong = function(index) {\n        let list = store.currentList;      \n        list.songs.splice(index, 1); \n\n        // NOW MAKE IT OFFICIAL\n        store.updateCurrentList();\n    }\n    // THIS FUNCTION UPDATES THE TEXT IN THE ITEM AT index TO text\n    store.updateSong = function(index, songData) {\n        let list = store.currentList;\n        let song = list.songs[index];\n        song.title = songData.title;\n        song.artist = songData.artist;\n        song.youTubeId = songData.youTubeId;\n\n        // NOW MAKE IT OFFICIAL\n        store.updateCurrentList();\n    }\n    store.addNewSong = () => {\n        let playlistSize = store.getPlaylistSize();\n        store.addCreateSongTransaction(\n            playlistSize, \"Untitled\", \"?\", \"dQw4w9WgXcQ\");\n    }\n    // THIS FUNCDTION ADDS A CreateSong_Transaction TO THE TRANSACTION STACK\n    store.addCreateSongTransaction = (index, title, artist, youTubeId) => {\n        // ADD A SONG ITEM AND ITS NUMBER\n        let song = {\n            title: title,\n            artist: artist,\n            youTubeId: youTubeId\n        };\n        let transaction = new CreateSong_Transaction(store, index, song);\n        tps.addTransaction(transaction);\n    }    \n    store.addMoveSongTransaction = function (start, end) {\n        let transaction = new MoveSong_Transaction(store, start, end);\n        tps.addTransaction(transaction);\n    }\n    // THIS FUNCTION ADDS A RemoveSong_Transaction TO THE TRANSACTION STACK\n    store.addRemoveSongTransaction = () => {\n        let index = store.currentSongIndex;\n        let song = store.currentList.songs[index];\n        let transaction = new RemoveSong_Transaction(store, index, song);\n        tps.addTransaction(transaction);\n    }\n    store.addUpdateSongTransaction = function (index, newSongData) {\n        let song = store.currentList.songs[index];\n        let oldSongData = {\n            title: song.title,\n            artist: song.artist,\n            youTubeId: song.youTubeId\n        };\n        let transaction = new UpdateSong_Transaction(this, index, oldSongData, newSongData);        \n        tps.addTransaction(transaction);\n    }\n    store.updateCurrentList = function() {\n        async function asyncUpdateCurrentList() {\n            const response = await api.updatePlaylistById(store.currentList._id, store.currentList);\n            if (response.data.success) {\n                storeReducer({\n                    type: GlobalStoreActionType.SET_CURRENT_LIST,\n                    payload: store.currentList\n                });\n            }\n        }\n        asyncUpdateCurrentList();\n    }\n\n    store.updatePlayingList = function() {\n        async function asyncUpdateCurrentList() {\n            const response = await api.updatePlaylistById(store.playingList._id, store.playingList);\n            if (response.data.success) {\n                storeReducer({\n                    type: GlobalStoreActionType.SET_PLAYING_LIST,\n                    payload: {playingList: store.playingList, playlists: store.idNamePairs}\n                });\n            }\n        }\n        asyncUpdateCurrentList();\n    }\n\n    store.undo = function () {\n        tps.undoTransaction();\n    }\n    store.redo = function () {\n        tps.doTransaction();\n    }\n    store.canAddNewSong = function() {\n        return (store.currentList !== null);\n    }\n    store.canUndo = function() {\n        return ((store.currentList !== null) && tps.hasTransactionToUndo());\n    }\n    store.canRedo = function() {\n        return ((store.currentList !== null) && tps.hasTransactionToRedo());\n    }\n    store.canClose = function() {\n        return (store.currentList !== null);\n    }\n\n    // THIS FUNCTION ENABLES THE PROCESS OF EDITING A LIST NAME\n    store.setIsListNameEditActive = function () {\n        storeReducer({\n            type: GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE,\n            payload: null\n        });\n    }\n\n    store.rerender = function () {\n        setStore({\n            currentModal : store.currentModal,\n            idNamePairs: store.idNamePairs,\n            currentList: store.currentList,\n            currentSongIndex: store.currentSongIndex,\n            currentSong: store.currentSong,\n            listNameActive: store.listNameActive,\n            listIdMarkedForDeletion: store.listIdMarkedForDeletion,\n            listMarkedForDeletion: store.listMarkedForDeletion\n        })\n    }\n\n    function KeyPress(event) {\n        if (!store.modalOpen && event.ctrlKey){\n            if(event.key === 'z'){\n                store.undo();\n            } \n            if(event.key === 'y'){\n                store.redo();\n            }\n        }\n    }\n  \n    document.onkeydown = (event) => KeyPress(event);\n\n\n    return (\n        <GlobalStoreContext.Provider value={{\n            store\n        }}>\n            {props.children}\n        </GlobalStoreContext.Provider>\n    );\n}\n\nexport default GlobalStoreContext;\nexport { GlobalStoreContextProvider };"],"mappings":"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"},"metadata":{},"sourceType":"module"}