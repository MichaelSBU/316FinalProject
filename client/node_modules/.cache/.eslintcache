[{"/Users/mikeybudney/Desktop/CSE316FINALPROJECT/client/src/index.js":"1","/Users/mikeybudney/Desktop/CSE316FINALPROJECT/client/src/App.js":"2","/Users/mikeybudney/Desktop/CSE316FINALPROJECT/client/src/reportWebVitals.js":"3","/Users/mikeybudney/Desktop/CSE316FINALPROJECT/client/src/auth/index.js":"4","/Users/mikeybudney/Desktop/CSE316FINALPROJECT/client/src/components/index.js":"5","/Users/mikeybudney/Desktop/CSE316FINALPROJECT/client/src/store/index.js":"6","/Users/mikeybudney/Desktop/CSE316FINALPROJECT/client/src/components/AppBanner.js":"7","/Users/mikeybudney/Desktop/CSE316FINALPROJECT/client/src/components/LoginScreen.js":"8","/Users/mikeybudney/Desktop/CSE316FINALPROJECT/client/src/components/MUIDeleteModal.js":"9","/Users/mikeybudney/Desktop/CSE316FINALPROJECT/client/src/components/MUIEditSongModal.js":"10","/Users/mikeybudney/Desktop/CSE316FINALPROJECT/client/src/components/MUIErrorModal.js":"11","/Users/mikeybudney/Desktop/CSE316FINALPROJECT/client/src/components/MUIRemoveSongModal.js":"12","/Users/mikeybudney/Desktop/CSE316FINALPROJECT/client/src/components/RegisterScreen.js":"13","/Users/mikeybudney/Desktop/CSE316FINALPROJECT/client/src/components/SongCard.js":"14","/Users/mikeybudney/Desktop/CSE316FINALPROJECT/client/src/components/SplashScreen.js":"15","/Users/mikeybudney/Desktop/CSE316FINALPROJECT/client/src/components/ListCard.js":"16","/Users/mikeybudney/Desktop/CSE316FINALPROJECT/client/src/components/Statusbar.js":"17","/Users/mikeybudney/Desktop/CSE316FINALPROJECT/client/src/components/HomeWrapper.js":"18","/Users/mikeybudney/Desktop/CSE316FINALPROJECT/client/src/components/HomeScreen.js":"19","/Users/mikeybudney/Desktop/CSE316FINALPROJECT/client/src/transactions/CreateSong_Transaction.js":"20","/Users/mikeybudney/Desktop/CSE316FINALPROJECT/client/src/transactions/RemoveSong_Transaction.js":"21","/Users/mikeybudney/Desktop/CSE316FINALPROJECT/client/src/common/jsTPS.js":"22","/Users/mikeybudney/Desktop/CSE316FINALPROJECT/client/src/transactions/UpdateSong_Transaction.js":"23","/Users/mikeybudney/Desktop/CSE316FINALPROJECT/client/src/transactions/MoveSong_Transaction.js":"24","/Users/mikeybudney/Desktop/CSE316FINALPROJECT/client/src/auth/auth-request-api/index.js":"25","/Users/mikeybudney/Desktop/CSE316FINALPROJECT/client/src/store/store-request-api/index.js":"26","/Users/mikeybudney/Desktop/CSE316FINALPROJECT/client/src/components/Copyright.js":"27","/Users/mikeybudney/Desktop/CSE316FINALPROJECT/client/src/components/SortMenu.js":"28","/Users/mikeybudney/Desktop/CSE316FINALPROJECT/client/src/components/YoutubePlayer.js":"29"},{"size":642,"mtime":1670316980067,"results":"30","hashOfConfig":"31"},{"size":1216,"mtime":1670316980067,"results":"32","hashOfConfig":"31"},{"size":362,"mtime":1666817275000,"results":"33","hashOfConfig":"31"},{"size":5510,"mtime":1670308040337,"results":"34","hashOfConfig":"31"},{"size":913,"mtime":1670202865000,"results":"35","hashOfConfig":"31"},{"size":36268,"mtime":1670310766172,"results":"36","hashOfConfig":"31"},{"size":3822,"mtime":1670318084092,"results":"37","hashOfConfig":"31"},{"size":4427,"mtime":1670192211000,"results":"38","hashOfConfig":"31"},{"size":2516,"mtime":1669358840000,"results":"39","hashOfConfig":"31"},{"size":3761,"mtime":1669359715000,"results":"40","hashOfConfig":"31"},{"size":1130,"mtime":1669358841000,"results":"41","hashOfConfig":"31"},{"size":2665,"mtime":1669358842000,"results":"42","hashOfConfig":"31"},{"size":5990,"mtime":1670318229513,"results":"43","hashOfConfig":"31"},{"size":2606,"mtime":1670357806943,"results":"44","hashOfConfig":"31"},{"size":1640,"mtime":1670316696823,"results":"45","hashOfConfig":"31"},{"size":15235,"mtime":1670358061650,"results":"46","hashOfConfig":"31"},{"size":811,"mtime":1669265503000,"results":"47","hashOfConfig":"31"},{"size":400,"mtime":1669525427000,"results":"48","hashOfConfig":"31"},{"size":8778,"mtime":1670313833730,"results":"49","hashOfConfig":"31"},{"size":658,"mtime":1666817275000,"results":"50","hashOfConfig":"31"},{"size":659,"mtime":1666817275000,"results":"51","hashOfConfig":"31"},{"size":6473,"mtime":1666817275000,"results":"52","hashOfConfig":"31"},{"size":766,"mtime":1666817275000,"results":"53","hashOfConfig":"31"},{"size":730,"mtime":1666817275000,"results":"54","hashOfConfig":"31"},{"size":1716,"mtime":1670310677270,"results":"55","hashOfConfig":"31"},{"size":2310,"mtime":1670309797609,"results":"56","hashOfConfig":"31"},{"size":446,"mtime":1667599001000,"results":"57","hashOfConfig":"31"},{"size":3109,"mtime":1670358263478,"results":"58","hashOfConfig":"31"},{"size":6978,"mtime":1670357804497,"results":"59","hashOfConfig":"31"},{"filePath":"60","messages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},"12agcle",{"filePath":"63","messages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"65","messages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"67","messages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"62"},{"filePath":"70","messages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"72","messages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"62"},{"filePath":"75","messages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"62"},{"filePath":"78","messages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"62"},{"filePath":"81","messages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"83","messages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"62"},{"filePath":"86","messages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"62"},{"filePath":"89","messages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"62"},{"filePath":"92","messages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"94","messages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"96","messages":"97","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"98","messages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"100","messages":"101","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"62"},{"filePath":"103","messages":"104","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"105","messages":"106","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"62"},{"filePath":"108","messages":"109","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"110","messages":"111","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"112","messages":"113","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"114","messages":"115","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"116","messages":"117","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"118","messages":"119","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"120","messages":"121","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"122","messages":"123","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"124","messages":"125","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"126","messages":"127","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/mikeybudney/Desktop/CSE316FINALPROJECT/client/src/index.js",[],["128","129"],"/Users/mikeybudney/Desktop/CSE316FINALPROJECT/client/src/App.js",[],"/Users/mikeybudney/Desktop/CSE316FINALPROJECT/client/src/reportWebVitals.js",[],"/Users/mikeybudney/Desktop/CSE316FINALPROJECT/client/src/auth/index.js",["130","131"],"import React, { useContext, createContext, useEffect, useState } from \"react\";\nimport { useHistory } from 'react-router-dom'\nimport api from './auth-request-api'\nimport GlobalStoreContext from '../store'\n\nconst AuthContext = createContext();\nconsole.log(\"create AuthContext: \" + AuthContext);\n\n// THESE ARE ALL THE TYPES OF UPDATES TO OUR AUTH STATE THAT CAN BE PROCESSED\nexport const AuthActionType = {\n    GET_LOGGED_IN: \"GET_LOGGED_IN\",\n    LOGIN_USER: \"LOGIN_USER\",\n    LOGOUT_USER: \"LOGOUT_USER\",\n    REGISTER_USER: \"REGISTER_USER\"\n}\n\nfunction AuthContextProvider(props) {\n    const {store} = useContext(GlobalStoreContext);\n    const [auth, setAuth] = useState({\n        user: null,\n        loggedIn: false,\n        errorMessage: null\n    });\n    const history = useHistory();\n\n    useEffect(() => {\n        auth.getLoggedIn();\n    }, []);\n\n    const authReducer = (action) => {\n        const { type, payload } = action;\n        switch (type) {\n            case AuthActionType.GET_LOGGED_IN: {\n                return setAuth({\n                    user: payload.user,\n                    loggedIn: payload.loggedIn,\n                    errorMessage: null\n                });\n            }\n            case AuthActionType.LOGIN_USER: {\n                return setAuth({\n                    user: payload.user,\n                    loggedIn: payload.loggedIn,\n                    errorMessage: payload.errorMessage\n                })\n            }\n            case AuthActionType.LOGOUT_USER: {\n                return setAuth({\n                    user: null,\n                    loggedIn: false,\n                    errorMessage: null\n                })\n            }\n            case AuthActionType.REGISTER_USER: {\n                return setAuth({\n                    user: payload.user,\n                    loggedIn: payload.loggedIn,\n                    errorMessage: payload.errorMessage\n                })\n            }\n            default:\n                return auth;\n        }\n    }\n\n    auth.getLoggedIn = async function () {\n        const response = await api.getLoggedIn();\n        if (response.status === 200) {\n            authReducer({\n                type: AuthActionType.GET_LOGGED_IN,\n                payload: {\n                    loggedIn: response.data.loggedIn,\n                    user: response.data.user\n                }\n            });\n        }\n    }\n\n    auth.registerUser = async function(userName, firstName, lastName, email, password, passwordVerify) {\n        console.log(\"REGISTERING USER\");\n        try{   \n            const response = await api.registerUser(userName, firstName, lastName, email, password, passwordVerify);   \n            if (response.status === 200) {\n                console.log(\"Registered Sucessfully\");\n                authReducer({\n                    type: AuthActionType.REGISTER_USER,\n                    payload: {\n                        user: response.data.user,\n                        loggedIn: false,\n                        errorMessage: null\n                    }\n                })\n                history.push(\"/login\");\n                console.log(\"NOW WE LOGIN\");\n                \n            }\n        } catch(error){\n            authReducer({\n                type: AuthActionType.REGISTER_USER,\n                payload: {\n                    user: auth.user,\n                    loggedIn: false,\n                    errorMessage: error.response.data.errorMessage\n                }\n            })\n        }\n    }\n\n    auth.loginUser = async function(email, password) {\n        if(email === \"guest\" && password === \"p\"){\n            authReducer({\n                type: AuthActionType.LOGIN_USER,\n                payload: {\n                    user: \"guest\",\n                    loggedIn: true,\n                    errorMessage: null\n                }\n            })\n            history.push(\"/\");\n        } else {\n        try{\n            const response = await api.loginUser(email, password);\n            if (response.status === 200) {\n                authReducer({\n                    type: AuthActionType.LOGIN_USER,\n                    payload: {\n                        user: response.data.user,\n                        loggedIn: true,\n                        errorMessage: null\n                    }\n                })\n                history.push(\"/\");\n            }\n        } catch(error){\n            authReducer({\n                type: AuthActionType.LOGIN_USER,\n                payload: {\n                    user: auth.user,\n                    loggedIn: false,\n                    errorMessage: error.response.data.errorMessage\n                }\n            })\n        }\n    }\n    }\n\n    auth.logoutUser = async function() {\n        const response = await api.logoutUser();\n        if (response.status === 200) {\n            authReducer( {\n                type: AuthActionType.LOGOUT_USER,\n                payload: null\n            })\n            history.push(\"/\");\n        }\n    }\n\n    auth.getUserInitials = function() {\n        let initials = \"\";\n        if (auth.user !== \"guest\" && auth.user !== null) {\n            initials += auth.user.firstName.charAt(0);\n            initials += auth.user.lastName.charAt(0);\n        }\n        console.log(\"user initials: \" + initials);\n        return initials;\n    }\n\n    return (\n        <AuthContext.Provider value={{\n            auth\n        }}>\n            {props.children}\n        </AuthContext.Provider>\n    );\n}\n\nexport default AuthContext;\nexport { AuthContextProvider };","/Users/mikeybudney/Desktop/CSE316FINALPROJECT/client/src/components/index.js",[],"/Users/mikeybudney/Desktop/CSE316FINALPROJECT/client/src/store/index.js",["132"],"import { createContext, useContext, useState } from 'react'\nimport { useHistory } from 'react-router-dom'\nimport jsTPS from '../common/jsTPS'\nimport api from './store-request-api'\nimport CreateSong_Transaction from '../transactions/CreateSong_Transaction'\nimport MoveSong_Transaction from '../transactions/MoveSong_Transaction'\nimport RemoveSong_Transaction from '../transactions/RemoveSong_Transaction'\nimport UpdateSong_Transaction from '../transactions/UpdateSong_Transaction'\nimport AuthContext from '../auth'\n//import YouTubePlayerExample from '../YouTubePlaylisterReact'\n\n/*\n    This is our global data store. Note that it uses the Flux design pattern,\n    which makes use of things like actions and reducers. \n    \n    @author McKilla Gorilla\n*/\n\n// THIS IS THE CONTEXT WE'LL USE TO SHARE OUR STORE\nexport const GlobalStoreContext = createContext({});\nconsole.log(\"create GlobalStoreContext\");\n\n// THESE ARE ALL THE TYPES OF UPDATES TO OUR GLOBAL\n// DATA STORE STATE THAT CAN BE PROCESSED\nexport const GlobalStoreActionType = {\n    SET_UP_GUEST_MODE: \"SET_UP_GUEST_MODE\",\n    CHANGE_LIST_NAME: \"CHANGE_LIST_NAME\",\n    CLOSE_CURRENT_LIST: \"CLOSE_CURRENT_LIST\",\n    CREATE_NEW_LIST: \"CREATE_NEW_LIST\",\n    LOAD_ID_NAME_PAIRS: \"LOAD_ID_NAME_PAIRS\",\n    MARK_LIST_FOR_DELETION: \"MARK_LIST_FOR_DELETION\",\n    SET_CURRENT_LIST: \"SET_CURRENT_LIST\",\n    SET_PLAYING_LIST: \"SET_PLAYING_LIST\",\n    SET_LIST_NAME_EDIT_ACTIVE: \"SET_LIST_NAME_EDIT_ACTIVE\",\n    EDIT_SONG: \"EDIT_SONG\",\n    REMOVE_SONG: \"REMOVE_SONG\",\n    HIDE_MODALS: \"HIDE_MODALS\",\n    CHANGE_SORT_TYPE: \"CHANGE_SORT_TYPE\",\n    GO_TO_MY_PLAYLISTS: \"GO_TO_MY_PLAYLISTS\"\n}\n\n// WE'LL NEED THIS TO PROCESS TRANSACTIONS\nconst tps = new jsTPS();\n\nconst CurrentModal = {\n    NONE : \"NONE\",\n    DELETE_LIST : \"DELETE_LIST\",\n    EDIT_SONG : \"EDIT_SONG\",\n    REMOVE_SONG : \"REMOVE_SONG\",\n    ERROR : \"ERROR\"\n}\n\n// WITH THIS WE'RE MAKING OUR GLOBAL DATA STORE\n// AVAILABLE TO THE REST OF THE APPLICATION\nfunction GlobalStoreContextProvider(props) {\n\n    // SINCE WE'VE WRAPPED THE STORE IN THE AUTH CONTEXT WE CAN ACCESS THE USER HERE\n    const { auth } = useContext(AuthContext);\n    console.log(\"auth: \" + auth);\n\n    // THESE ARE ALL THE THINGS OUR DATA STORE WILL MANAGE\n    const [store, setStore] = useState({\n        currentModal : CurrentModal.NONE,\n        idNamePairs: [],\n        currentList: null,\n        playingList : null,\n        listBeingPlayed: null,\n        currentSongIndex : -1,\n        currentSong : null,\n        listNameActive: false,\n        listIdMarkedForDeletion: null,\n        listMarkedForDeletion: null,\n        sortBy: null,\n        searchBy: null,\n        searchValue: \"\"\n    });\n    console.log(store);\n    const history = useHistory();\n\n    console.log(\"inside useGlobalStore\");\n\n    // HERE'S THE DATA STORE'S REDUCER, IT MUST\n    // HANDLE EVERY TYPE OF STATE CHANGE\n    const storeReducer = (action) => {\n        const { type, payload } = action;\n        switch (type) {\n            // ENTER GUEST\n            case GlobalStoreActionType.SET_UP_GUEST_MODE: {\n                return setStore({\n                    currentModal : CurrentModal.NONE,\n                    idNamePairs: null,\n                    currentList: null,\n                    playingList : null,\n                    currentSongIndex: -1,\n                    currentSong: null,\n                    listNameActive: null,\n                    listIdMarkedForDeletion: null,\n                    listMarkedForDeletion: null,\n                    sortBy: null,\n                    searchBy: payload,\n                    searchValue: \"\"\n                });\n            }\n            // CHANGE SORT TYPE\n            case GlobalStoreActionType.CHANGE_SORT_TYPE: {\n                return setStore({\n                    currentModal : CurrentModal.NONE,\n                    idNamePairs: store.idNamePairs,\n                    currentList: store.currentList,\n                    playingList : store.playingList,\n                    currentSongIndex: store.currentSongIndex,\n                    currentSong: store.currentSong,\n                    listNameActive: store.listNameActive,\n                    listIdMarkedForDeletion: store.listIdMarkedForDeletion,\n                    listMarkedForDeletion: store.listMarkedForDeletion,\n                    sortBy: payload,\n                    searchBy: store.searchBy,\n                    searchValue: store.searchValue\n                });\n            }\n            // LIST UPDATE OF ITS NAME\n            case GlobalStoreActionType.CHANGE_LIST_NAME: {\n                console.log(\"SORT BY\" + store.sortBy);\n                return setStore({\n                    currentModal : CurrentModal.NONE,\n                    idNamePairs: payload.idNamePairs,\n                    currentList: payload.playlist,\n                    playingList : store.playingList,\n                    currentSongIndex: -1,\n                    currentSong: null,\n                    listNameActive: false,\n                    listIdMarkedForDeletion: null,\n                    listMarkedForDeletion: null,\n                    sortBy: store.sortBy,\n                    searchBy: null,\n                    searchValue: store.searchValue\n                });\n            }\n            // STOP EDITING THE CURRENT LIST\n            case GlobalStoreActionType.CLOSE_CURRENT_LIST: {\n                return setStore({\n                    currentModal : CurrentModal.NONE,\n                    idNamePairs: store.idNamePairs,\n                    currentList: null,\n                    playingList : store.playingList,\n                    currentSongIndex: -1,\n                    currentSong: null,\n                    listNameActive: false,\n                    listIdMarkedForDeletion: null,\n                    listMarkedForDeletion: null,\n                    sortBy: store.sortBy,\n                    searchBy: store.searchBy,\n                    searchValue: store.searchValue\n                })\n            }\n            // CREATE A NEW LIST\n            case GlobalStoreActionType.CREATE_NEW_LIST: {                \n                return setStore({\n                    currentModal : CurrentModal.NONE,\n                    idNamePairs: store.idNamePairs,\n                    currentList: store.currentList,\n                    playingList : store.playingList,\n                    currentSongIndex: -1,\n                    currentSong: null,\n                    listNameActive: false,\n                    listIdMarkedForDeletion: null,\n                    listMarkedForDeletion: null,\n                    sortBy: store.sortBy,\n                    searchBy: null,\n                    searchValue: store.searchValue\n                })\n            }\n            // GET ALL THE LISTS SO WE CAN PRESENT THEM\n            case GlobalStoreActionType.LOAD_ID_NAME_PAIRS: {\n                console.log(\"LOAD_ID_NAME_PAIRS setStore is being done!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\");\n                return setStore({\n                    currentModal : CurrentModal.NONE,\n                    idNamePairs: payload.playlists,\n                    currentList: null,\n                    playingList : store.playingList,\n                    currentSongIndex: -1,\n                    currentSong: null,\n                    listNameActive: false,\n                    listIdMarkedForDeletion: null,\n                    listMarkedForDeletion: null,\n                    sortBy: payload.sortType,\n                    searchBy: store.searchBy,\n                    searchValue: store.searchValue\n                });\n            }\n            // PREPARE TO DELETE A LIST\n            case GlobalStoreActionType.MARK_LIST_FOR_DELETION: {\n                return setStore({\n                    currentModal : CurrentModal.DELETE_LIST,\n                    idNamePairs: store.idNamePairs,\n                    currentList: null,\n                    playingList : store.playingList,\n                    currentSongIndex: -1,\n                    currentSong: null,\n                    listNameActive: false,\n                    listIdMarkedForDeletion: payload.id,\n                    listMarkedForDeletion: payload.playlist,\n                    sortBy: store.sortBy,\n                    searchBy: store.searchBy,\n                    searchValue: store.searchValue\n                });\n            }\n            // UPDATE CURRENT LIST\n            case GlobalStoreActionType.SET_CURRENT_LIST: {\n                return setStore({\n                    currentModal : CurrentModal.NONE,\n                    idNamePairs: store.idNamePairs,\n                    currentList: payload,\n                    playingList : store.playingList,\n                    currentSongIndex: -1,\n                    currentSong: null,\n                    listNameActive: false,\n                    listIdMarkedForDeletion: null,\n                    listMarkedForDeletion: null,\n                    sortBy: store.sortBy,\n                    searchBy: store.searchBy,\n                    searchValue: store.searchValue\n                });\n            }\n             // UPDATE PLAYING LIST\n             case GlobalStoreActionType.SET_PLAYING_LIST: {\n                console.log(\"SET_PLAYING_LIST setStore is being done!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\");\n                return setStore({\n                    currentModal : CurrentModal.NONE,\n                    idNamePairs: payload.playlists,\n                    currentList: store.currentList,\n                    playingList : payload.playingList,\n                    currentSongIndex: store.currentSongIndex,\n                    currentSong: store.currentSong,\n                    listNameActive: store.listNameActive,\n                    listIdMarkedForDeletion: store.listIdMarkedForDeletion,\n                    listMarkedForDeletion: store.listMarkedForDeletion,\n                    sortBy: store.sortBy,\n                    searchBy: store.searchBy,\n                    searchValue: store.searchValue\n                });\n            }\n            // START EDITING A LIST NAME\n            case GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE: {\n                return setStore({\n                    currentModal : CurrentModal.NONE,\n                    idNamePairs: store.idNamePairs,\n                    currentList: payload,\n                    playingList : store.playingList,\n                    currentSongIndex: -1,\n                    currentSong: null,\n                    listNameActive: true,\n                    listIdMarkedForDeletion: null,\n                    listMarkedForDeletion: null,\n                    sortBy: store.sortBy,\n                    searchBy: null,\n                    searchValue: store.searchValue\n                });\n            }\n            // \n            case GlobalStoreActionType.EDIT_SONG: {\n                return setStore({\n                    currentModal : CurrentModal.EDIT_SONG,\n                    idNamePairs: store.idNamePairs,\n                    currentList: store.currentList,\n                    playingList : store.playingList,\n                    currentSongIndex: payload.currentSongIndex,\n                    currentSong: payload.currentSong,\n                    listNameActive: false,\n                    listIdMarkedForDeletion: null,\n                    listMarkedForDeletion: null,\n                    sortBy: store.sortBy,\n                    searchBy: null,\n                    searchValue: store.searchValue\n                });\n            }\n            case GlobalStoreActionType.REMOVE_SONG: {\n                return setStore({\n                    currentModal : CurrentModal.REMOVE_SONG,\n                    idNamePairs: store.idNamePairs,\n                    currentList: store.currentList,\n                    playingList : store.playingList,\n                    currentSongIndex: payload.currentSongIndex,\n                    currentSong: payload.currentSong,\n                    listNameActive: false,\n                    listIdMarkedForDeletion: null,\n                    listMarkedForDeletion: null,\n                    sortBy: store.sortBy,\n                    searchBy: null,\n                    searchValue: store.searchValue\n                });\n            }\n            case GlobalStoreActionType.HIDE_MODALS: {\n                return setStore({\n                    currentModal : CurrentModal.NONE,\n                    idNamePairs: store.idNamePairs,\n                    currentList: store.currentList,\n                    playingList : store.playingList,\n                    currentSongIndex: -1,\n                    currentSong: null,\n                    listNameActive: false,\n                    listIdMarkedForDeletion: null,\n                    listMarkedForDeletion: null,\n                    sortBy: store.sortBy,\n                    searchBy: store.searchBy,\n                    searchValue: store.searchValue\n                });\n            }\n            case GlobalStoreActionType.GO_TO_MY_PLAYLISTS: {\n                console.log(\"going to your playlists  going to your playlists  going to your playlists  going to your playlists\")\n                return setStore({\n                    currentModal : CurrentModal.NONE,\n                    idNamePairs: payload.playlists,\n                    currentList: null,\n                    playingList : store.playingList,\n                    currentSongIndex: store.currentSongIndex,\n                    currentSong: store.currentSong,\n                    listNameActive: store.listNameActive,\n                    listIdMarkedForDeletion: store.listIdMarkedForDeletion,\n                    listMarkedForDeletion: store.listMarkedForDeletion,\n                    sortBy: payload.sortBy,\n                    searchBy: payload.search,\n                    searchValue: payload.searchValue\n                });\n            }\n\n            default:\n                return store;\n        }\n    }\n\n    store.enterGuestMode = function (){\n        auth.loginUser(\"guest\", \"p\");\n        storeReducer({\n            type: GlobalStoreActionType.SET_UP_GUEST_MODE,\n            payload: true\n        });\n    }\n\n    store.tryAcessingOtherAccountPlaylist = function(){\n        let id = \"635f203d2e072037af2e6284\";\n        async function asyncSetCurrentList(id) {\n            let response = await api.getPlaylistById(id);\n            if (response.data.success) {\n                let playlist = response.data.playlist;\n                storeReducer({\n                    type: GlobalStoreActionType.SET_CURRENT_LIST,\n                    payload: playlist\n                });\n            }\n        }\n        asyncSetCurrentList(id);\n        history.push(\"/playlist/635f203d2e072037af2e6284\");\n    }\n\n    store.addComment = function(comment){\n        let list = store.playingList;      \n        list.comments.push({postedBy: auth.user.firstName + ' ' + auth.user.lastName, comment: comment})\n        // NOW MAKE IT OFFICIAL\n        store.updatePlayingList();\n    }\n    \n    // THESE ARE THE FUNCTIONS THAT WILL UPDATE OUR STORE AND\n    // DRIVE THE STATE OF THE APPLICATION. WE'LL CALL THESE IN \n    // RESPONSE TO EVENTS INSIDE OUR COMPONENTS.\n\n    // THIS FUNCTION PROCESSES CHANGING A LIST NAME\n    store.changeListName = function (id, newName) {\n        // GET THE LIST\n        async function asyncPlaylistExists(newName){\n            let response = await api.getPlaylistByName(newName);\n            if(response.data.success){\n        async function asyncChangeListName(id) {\n            let response = await api.getPlaylistById(id);\n            if (response.data.success) {\n                let playlist = response.data.playlist;\n                playlist.name = newName;\n                async function updateList(playlist) {\n                    response = await api.updatePlaylistById(playlist._id, playlist);\n                    if (response.data.success) {\n                        async function getListPairs(playlist) {\n                            response = await api.getPlaylistPairs(store.searchValue);\n                            if (response.data.success) {\n                                let pairsArray = response.data.idNamePairs;\n                                storeReducer({\n                                    type: GlobalStoreActionType.CHANGE_LIST_NAME,\n                                    payload: {\n                                        idNamePairs: pairsArray,\n                                        playlist: playlist\n                                    }\n                                });\n                                store.loadIdNamePairs();\n                            }\n                        }\n                        getListPairs(playlist);\n                    }\n                }\n                updateList(playlist);\n            }\n        }\n        asyncChangeListName(id);\n    } else{\n        console.log(response.data.message);\n    }\n    }\n    asyncPlaylistExists(newName)\n    }\n\n    // THIS FUNCTION PROCESSES CLOSING THE CURRENTLY LOADED LIST\n    store.closeCurrentList = function () {\n        storeReducer({\n            type: GlobalStoreActionType.CLOSE_CURRENT_LIST,\n            payload: {}\n        });\n        tps.clearAllTransactions();\n        history.push(\"/\");\n    }\n\n    // THIS FUNCTION CREATES A NEW LIST\n    store.createNewList = async function () {\n        let newListName = \"Untitled 0\";\n        const response = await api.createPlaylist(newListName, auth.user.email, auth.user.userName, [], [], [], [], \"no\", 0);\n        if (response.status === 201) {\n            tps.clearAllTransactions();\n            let newList = response.data.playlist;\n            storeReducer({\n                type: GlobalStoreActionType.CREATE_NEW_LIST\n            }\n            );\n            history.push(\"/\");\n            store.loadIdNamePairs();\n        }\n        else {\n            console.log(\"API FAILED TO CREATE A NEW LIST\");\n        }\n    }\n\n    store.sortListsBy = function (sortBy) {\n        storeReducer({\n            type: GlobalStoreActionType.CHANGE_SORT_TYPE,\n            payload: sortBy\n        });\n        console.log(sortBy);\n        console.log(store);\n        if(store.searchBy===null){\n            store.loadIdNamePairs(sortBy);\n        } else {\n            store.allPlaylists(store.searchBy, store.searchValue, sortBy);\n        }\n        console.log(store.sortBy)\n    }\n\n    store.myPlaylists = function (s) {\n        async function asyncLoadIdNamePairs() {\n            const response = await api.getPlaylistPairs(s);\n            if (response.data.success) {\n                let pairsArray = response.data.idNamePairs;\n                console.log(pairsArray);\n                storeReducer({\n                    type: GlobalStoreActionType.GO_TO_MY_PLAYLISTS,\n                    payload: {playlists: pairsArray, search: null, searchValue: s, sortBy: store.sortBy}\n                });\n            }\n            else {\n                console.log(\"API FAILED TO GET THE LIST PAIRS\");\n            }\n        }\n        asyncLoadIdNamePairs();\n    }\n\n    //flag is true if search playlist by playlistname, flag is false if search playlist by username of user who published the playlist.\n    store.allPlaylists = function (flag, searchValue, sortBy) {\n        if(sortBy === undefined){\n            sortBy = store.sortBy\n        }\n        console.log(flag + \"    \" + searchValue);\n        async function asyncLoadIdNamePairs() {\n            const response = await api.getPlaylists(flag, searchValue);\n            console.log(\"ffffffffff\");\n            if (response.data.success) {\n                console.log(\"ffffffffffffffffff\");\n                let pairsArray = response.data.idNamePairs;\n                if(sortBy !== null){\n                    pairsArray.sort(sortBy);\n                }\n                storeReducer({\n                    type: GlobalStoreActionType.GO_TO_MY_PLAYLISTS,\n                    payload: {playlists: pairsArray, search: flag, searchValue: searchValue, sortBy: sortBy}\n                });\n            }\n            else {\n                console.log(\"API FAILED TO GET THE LIST PAIRS\");\n            }\n        }\n        asyncLoadIdNamePairs();\n    }\n\n\n    // THIS FUNCTION LOADS ALL THE ID, NAME PAIRS SO WE CAN LIST ALL THE LISTS\n    store.loadIdNamePairs = function (sortBy) {\n        async function asyncLoadIdNamePairs() {\n            const response = await api.getPlaylistPairs(store.searchValue);\n            if (response.data.success) {\n                let pairsArray = response.data.idNamePairs;\n                console.log(pairsArray);\n                if(store.sortBy !== null){\n                    pairsArray.sort(store.sortBy);\n                }\n                if(sortBy !== undefined && sortBy !== null){\n                    pairsArray.sort(sortBy);\n                }\n                console.log(pairsArray);\n                storeReducer({\n                    type: GlobalStoreActionType.LOAD_ID_NAME_PAIRS,\n                    payload: {playlists: pairsArray, sortType: sortBy}\n                });\n            }\n            else {\n                console.log(\"API FAILED TO GET THE LIST PAIRS\");\n            }\n        }\n        asyncLoadIdNamePairs();\n    }\n\n    store.setPlayingList = function (id) {\n        if(auth.user !== \"guest\"){\n        async function asyncSetPlayingList(id) {\n            let response = await api.getPlaylistById(id);\n            if (response.data.success) {\n                let playlist = response.data.playlist;\n                if(playlist.published!==\"no\"){\n                    playlist.listens++;\n                    response = await api.updatePlaylistById(playlist._id, playlist);\n                    if (response.data.success) {\n                        if(store.searchBy === null){\n                        response = await api.getPlaylistPairs(store.searchValue);\n                            if (response.data.success) {\n                                let pairsArray = response.data.idNamePairs;\n                                if(store.sortBy !== null){\n                                    pairsArray.sort(store.sortBy)\n                                }\n                                console.log(\"PAIRS ARRAY:  : : : :: : : : ::  :: : :: : : : ::  : : :: : : :: : : ::  \" + pairsArray);\n                                storeReducer({\n                                    type: GlobalStoreActionType.SET_PLAYING_LIST,\n                                    payload: {playingList: playlist, playlists: pairsArray}\n                                });\n                                console.log(store.idNamePairs);\n                            }\n                        } else {\n                            response = await api.getPlaylists(store.searchBy, store.searchValue);\n                            if (response.data.success) {\n                                let pairsArray = response.data.idNamePairs;\n                                if(store.sortBy !== null){\n                                    pairsArray.sort(store.sortBy)\n                                }\n                                console.log(\"PAIRS ARRAY:  : : : :: : : : ::  :: : :: : : : ::  : : :: : : :: : : ::  \" + pairsArray);\n                                storeReducer({\n                                    type: GlobalStoreActionType.SET_PLAYING_LIST,\n                                    payload: {playingList: playlist, playlists: pairsArray}\n                                });\n                                console.log(store.idNamePairs);\n                            }\n                        }\n                    }\n                } else {\n                    storeReducer({\n                        type: GlobalStoreActionType.SET_PLAYING_LIST,\n                        payload: {playingList: playlist, playlists: store.idNamePairs}\n                    });\n                }\n            }\n        }\n        asyncSetPlayingList(id);\n    } else{\n        async function asyncSetPlayingList(id) {\n            let response = await api.getPlaylistById(id);\n            if (response.data.success) {\n                let playlist = response.data.playlist;\n                storeReducer({\n                    type: GlobalStoreActionType.SET_PLAYING_LIST,\n                    payload: {playingList: playlist, playlists: store.idNamePairs}\n                });\n            }       \n        }\n        asyncSetPlayingList(id);\n    }\n}\n    \n\n\n    // THE FOLLOWING 5 FUNCTIONS ARE FOR COORDINATING THE DELETION\n    // OF A LIST, WHICH INCLUDES USING A VERIFICATION MODAL. THE\n    // FUNCTIONS ARE markListForDeletion, deleteList, deleteMarkedList,\n    // showDeleteListModal, and hideDeleteListModal\n    store.markListForDeletion = function (id) {\n        async function getListToDelete(id) {\n            let response = await api.getPlaylistById(id);\n            if (response.data.success) {\n                let playlist = response.data.playlist;\n                storeReducer({\n                    type: GlobalStoreActionType.MARK_LIST_FOR_DELETION,\n                    payload: {id: id, playlist: playlist}\n                });\n            }\n        }\n        getListToDelete(id);\n    }\n    store.deleteList = function (id) {\n        async function processDelete(id) {\n            let response = await api.deletePlaylistById(id);\n            store.loadIdNamePairs();\n            if (response.data.success) {\n                history.push(\"/\");\n            }\n        }\n        processDelete(id);\n    }\n    store.deleteMarkedList = function() {\n        store.deleteList(store.listIdMarkedForDeletion);\n        store.hideModals();\n        \n    }\n\n    store.publishPlaylist = function(id) {\n        async function pub(id) {\n            let response = await api.getPlaylistById(id);\n            if (response.data.success) {\n                let playlist = response.data.playlist;\n                playlist.published = new Date();\n                response = await api.updatePlaylistById(playlist._id, playlist);\n                store.loadIdNamePairs(store.sortBy);\n            }\n        }\n        pub(id);\n    }\n    store.duplicatePlaylist = function(id) {\n        async function dup(id) {\n            let response = await api.getPlaylistById(id);\n            if (response.data.success) {\n                let playlist = response.data.playlist;\n                response = await api.createPlaylist(\"Copy of \"+playlist.name, auth.user.email, auth.user.userName, playlist.songs, [], [], [], \"no\", 0);\n                console.log(\"createNewList response: \" + response);\n                if (response.status === 201) {\n                    history.push(\"/\");\n                    if(store.searchBy === null){\n                        store.loadIdNamePairs();\n                    }\n                }\n            }\n        }\n        dup(id);\n    }\n\n\n    // THIS FUNCTION SHOWS THE MODAL FOR PROMPTING THE USER\n    // TO SEE IF THEY REALLY WANT TO DELETE THE LIST\n\n    store.showEditSongModal = (songIndex, songToEdit) => {\n        storeReducer({\n            type: GlobalStoreActionType.EDIT_SONG,\n            payload: {currentSongIndex: songIndex, currentSong: songToEdit}\n        });        \n    }\n    store.showRemoveSongModal = (songIndex, songToRemove) => {\n        storeReducer({\n            type: GlobalStoreActionType.REMOVE_SONG,\n            payload: {currentSongIndex: songIndex, currentSong: songToRemove}\n        });        \n    }\n    store.hideModals = () => {\n        auth.errorMessage = null;\n        storeReducer({\n            type: GlobalStoreActionType.HIDE_MODALS,\n            payload: {}\n        });    \n    }\n    store.isDeleteListModalOpen = () => {\n        return store.currentModal === CurrentModal.DELETE_LIST;\n    }\n    store.isEditSongModalOpen = () => {\n        return store.currentModal === CurrentModal.EDIT_SONG;\n    }\n    store.isRemoveSongModalOpen = () => {\n        return store.currentModal === CurrentModal.REMOVE_SONG;\n    }\n    store.isErrorModalOpen = () => {\n        return store.currentModal === CurrentModal.ERROR;\n    }\n\n    \n    store.like = function (id, bool){\n        async function asyncGetList(id) {\n            let response = await api.getPlaylistById(id);\n            if (response.data.success) {\n                let playlist = response.data.playlist;\n                if(bool){\n                    playlist.likes.push(auth.user.email);\n                } else {\n                    playlist.dislikes.push(auth.user.email);\n                }\n                response = await api.updatePlaylistById(playlist._id, playlist);\n                if (response.data.success) {\n                    console.log(\"liked\");\n                    console.log(store.searchBy);\n                    if(store.searchBy === null){\n                        console.log(\"LIKED/DISLIKED OWN PLAYLIST\");\n                        store.loadIdNamePairs(store.sortBy);\n                    } else {\n                        console.log(\"LIKING/DISLIKING A PLAYLIST ON SEARCHING PAGES\")\n                        store.allPlaylists(store.searchBy, store.searchValue);\n                    }\n                }\n            }\n        }\n        asyncGetList(id);\n    }\n\n    // THE FOLLOWING 8 FUNCTIONS ARE FOR COORDINATING THE UPDATING\n    // OF A LIST, WHICH INCLUDES DEALING WITH THE TRANSACTION STACK. THE\n    // FUNCTIONS ARE setCurrentList, addMoveItemTransaction, addUpdateItemTransaction,\n    // moveItem, updateItem, updateCurrentList, undo, and redo\n    store.setCurrentList = function (id) {\n        async function asyncSetCurrentList(id) {\n            let response = await api.getPlaylistById(id);\n            if (response.data.success) {\n                let playlist = response.data.playlist;\n\n                \n                if (response.data.success) {\n                    storeReducer({\n                        type: GlobalStoreActionType.SET_CURRENT_LIST,\n                        payload: playlist\n                    });\n                }\n            }\n        }\n        asyncSetCurrentList(id);\n    }\n\n    store.getPlaylistSize = function() {\n        return store.currentList.songs.length;\n    }\n    store.addNewSong = function() {\n        let index = this.getPlaylistSize();\n        this.addCreateSongTransaction(index, \"Untitled\", \"?\", \"dQw4w9WgXcQ\");\n    }\n    // THIS FUNCTION CREATES A NEW SONG IN THE CURRENT LIST\n    // USING THE PROVIDED DATA AND PUTS THIS SONG AT INDEX\n    store.createSong = function(index, song) {\n        let list = store.currentList;      \n        list.songs.splice(index, 0, song);\n        // NOW MAKE IT OFFICIAL\n        store.updateCurrentList();\n    }\n    // THIS FUNCTION MOVES A SONG IN THE CURRENT LIST FROM\n    // start TO end AND ADJUSTS ALL OTHER ITEMS ACCORDINGLY\n    store.moveSong = function(start, end) {\n        let list = store.currentList;\n\n        // WE NEED TO UPDATE THE STATE FOR THE APP\n        if (start < end) {\n            let temp = list.songs[start];\n            for (let i = start; i < end; i++) {\n                list.songs[i] = list.songs[i + 1];\n            }\n            list.songs[end] = temp;\n        }\n        else if (start > end) {\n            let temp = list.songs[start];\n            for (let i = start; i > end; i--) {\n                list.songs[i] = list.songs[i - 1];\n            }\n            list.songs[end] = temp;\n        }\n\n        // NOW MAKE IT OFFICIAL\n        store.updateCurrentList();\n    }\n    // THIS FUNCTION REMOVES THE SONG AT THE index LOCATION\n    // FROM THE CURRENT LIST\n    store.removeSong = function(index) {\n        let list = store.currentList;      \n        list.songs.splice(index, 1); \n\n        // NOW MAKE IT OFFICIAL\n        store.updateCurrentList();\n    }\n    // THIS FUNCTION UPDATES THE TEXT IN THE ITEM AT index TO text\n    store.updateSong = function(index, songData) {\n        let list = store.currentList;\n        let song = list.songs[index];\n        song.title = songData.title;\n        song.artist = songData.artist;\n        song.youTubeId = songData.youTubeId;\n\n        // NOW MAKE IT OFFICIAL\n        store.updateCurrentList();\n    }\n    store.addNewSong = () => {\n        let playlistSize = store.getPlaylistSize();\n        store.addCreateSongTransaction(\n            playlistSize, \"Untitled\", \"?\", \"dQw4w9WgXcQ\");\n    }\n    // THIS FUNCDTION ADDS A CreateSong_Transaction TO THE TRANSACTION STACK\n    store.addCreateSongTransaction = (index, title, artist, youTubeId) => {\n        // ADD A SONG ITEM AND ITS NUMBER\n        let song = {\n            title: title,\n            artist: artist,\n            youTubeId: youTubeId\n        };\n        let transaction = new CreateSong_Transaction(store, index, song);\n        tps.addTransaction(transaction);\n    }    \n    store.addMoveSongTransaction = function (start, end) {\n        let transaction = new MoveSong_Transaction(store, start, end);\n        tps.addTransaction(transaction);\n    }\n    // THIS FUNCTION ADDS A RemoveSong_Transaction TO THE TRANSACTION STACK\n    store.addRemoveSongTransaction = () => {\n        let index = store.currentSongIndex;\n        let song = store.currentList.songs[index];\n        let transaction = new RemoveSong_Transaction(store, index, song);\n        tps.addTransaction(transaction);\n    }\n    store.addUpdateSongTransaction = function (index, newSongData) {\n        let song = store.currentList.songs[index];\n        let oldSongData = {\n            title: song.title,\n            artist: song.artist,\n            youTubeId: song.youTubeId\n        };\n        let transaction = new UpdateSong_Transaction(this, index, oldSongData, newSongData);        \n        tps.addTransaction(transaction);\n    }\n    store.updateCurrentList = function() {\n        async function asyncUpdateCurrentList() {\n            const response = await api.updatePlaylistById(store.currentList._id, store.currentList);\n            if (response.data.success) {\n                storeReducer({\n                    type: GlobalStoreActionType.SET_CURRENT_LIST,\n                    payload: store.currentList\n                });\n            }\n        }\n        asyncUpdateCurrentList();\n    }\n\n    store.updatePlayingList = function() {\n        async function asyncUpdateCurrentList() {\n            const response = await api.updatePlaylistById(store.playingList._id, store.playingList);\n            if (response.data.success) {\n                storeReducer({\n                    type: GlobalStoreActionType.SET_PLAYING_LIST,\n                    payload: {playingList: store.playingList, playlists: store.idNamePairs}\n                });\n            }\n        }\n        asyncUpdateCurrentList();\n    }\n\n    store.undo = function () {\n        tps.undoTransaction();\n    }\n    store.redo = function () {\n        tps.doTransaction();\n    }\n    store.canAddNewSong = function() {\n        return (store.currentList !== null);\n    }\n    store.canUndo = function() {\n        return ((store.currentList !== null) && tps.hasTransactionToUndo());\n    }\n    store.canRedo = function() {\n        return ((store.currentList !== null) && tps.hasTransactionToRedo());\n    }\n    store.canClose = function() {\n        return (store.currentList !== null);\n    }\n\n    // THIS FUNCTION ENABLES THE PROCESS OF EDITING A LIST NAME\n    store.setIsListNameEditActive = function () {\n        storeReducer({\n            type: GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE,\n            payload: null\n        });\n    }\n\n    store.rerender = function () {\n        setStore({\n            currentModal : store.currentModal,\n            idNamePairs: store.idNamePairs,\n            currentList: store.currentList,\n            currentSongIndex: store.currentSongIndex,\n            currentSong: store.currentSong,\n            listNameActive: store.listNameActive,\n            listIdMarkedForDeletion: store.listIdMarkedForDeletion,\n            listMarkedForDeletion: store.listMarkedForDeletion\n        })\n    }\n\n    function KeyPress(event) {\n        if (!store.modalOpen && event.ctrlKey){\n            if(event.key === 'z'){\n                store.undo();\n            } \n            if(event.key === 'y'){\n                store.redo();\n            }\n        }\n    }\n  \n    document.onkeydown = (event) => KeyPress(event);\n\n\n    return (\n        <GlobalStoreContext.Provider value={{\n            store\n        }}>\n            {props.children}\n        </GlobalStoreContext.Provider>\n    );\n}\n\nexport default GlobalStoreContext;\nexport { GlobalStoreContextProvider };","/Users/mikeybudney/Desktop/CSE316FINALPROJECT/client/src/components/AppBanner.js",["133","134"],"import { useContext, useState } from 'react';\nimport { Link } from 'react-router-dom'\nimport AuthContext from '../auth';\nimport { GlobalStoreContext } from '../store'\n\n\nimport AccountCircle from '@mui/icons-material/AccountCircle';\nimport AppBar from '@mui/material/AppBar';\nimport Box from '@mui/material/Box';\nimport IconButton from '@mui/material/IconButton';\nimport Menu from '@mui/material/Menu';\nimport MenuItem from '@mui/material/MenuItem';\nimport Toolbar from '@mui/material/Toolbar';\nimport Typography from '@mui/material/Typography';\n\nexport default function AppBanner() {\n    const { auth } = useContext(AuthContext);\n    const { store } = useContext(GlobalStoreContext);\n    const [anchorEl, setAnchorEl] = useState(null);\n    const isMenuOpen = Boolean(anchorEl);\n\n    const handleProfileMenuOpen = (event) => {\n        setAnchorEl(event.currentTarget);\n    };\n\n    const handleMenuClose = () => {\n        setAnchorEl(null);\n    };\n\n    const handleLogout = () => {\n        handleMenuClose();\n        auth.logoutUser();\n    }\n\n\n    const menuId = 'primary-search-account-menu';\n    const loggedOutMenu = (\n        <Menu\n            anchorEl={anchorEl}\n            anchorOrigin={{\n                vertical: 'top',\n                horizontal: 'right',\n            }}\n            id={menuId}\n            keepMounted\n            transformOrigin={{\n                vertical: 'top',\n                horizontal: 'right',\n            }}\n            open={isMenuOpen}\n            onClose={handleMenuClose}\n        >\n            <MenuItem onClick={handleMenuClose}><Link to='/login/'>Login</Link></MenuItem>\n            <MenuItem onClick={handleMenuClose}><Link to='/register/'>Create New Account</Link></MenuItem>\n        </Menu>\n    );\n    const loggedInMenu = \n        <Menu\n            anchorEl={anchorEl}\n            anchorOrigin={{\n                vertical: 'top',\n                horizontal: 'right',\n            }}\n            id={menuId}\n            keepMounted\n            transformOrigin={{\n                vertical: 'top',\n                horizontal: 'right',\n            }}\n            open={isMenuOpen}\n            onClose={handleMenuClose}\n        >\n            <MenuItem onClick={handleLogout}>Logout</MenuItem>\n        </Menu>        \n\n    let menu = loggedOutMenu;\n    if (auth.loggedIn && auth.user !== \"guest\") {\n        menu = loggedInMenu;\n    }\n    \n    function getAccountMenu(loggedIn) {\n        let userInitials = auth.getUserInitials();\n        console.log(\"userInitials: \" + userInitials);\n        if (loggedIn && userInitials !== \"\") \n            return <IconButton\n            size=\"large\"\n            edge=\"end\"\n            aria-label=\"account of current user\"\n            aria-controls={menuId}\n            aria-haspopup=\"true\"\n            onClick={handleProfileMenuOpen}\n            color=\"inherit\"\n            sx={{border:2, borderColor: \"black\", bgcolor:\"purple\"}}\n        >\n            {userInitials}\n        </IconButton>\n        else\n            return <IconButton onClick={handleProfileMenuOpen} sx={{fontSize:\"50px\"}}><AccountCircle sx={{color:\"black\", fontSize:\"inherit\"}} /></IconButton>;\n    }\n    if(auth.loggedIn){\n    return (\n        <Box sx={{flexGrow: 1}}>\n            <AppBar sx={{bgcolor: \"#d9dbde\"}} position=\"static\">\n                <Toolbar>\n                    <Box id=\"LOGO\" sx={{transform:\"translate(-10%,0%)\", height:\"61px\", width:\"170px\"}}></Box>\n                    <Box sx={{ flexGrow: 1 }}></Box>\n                    <Box sx={{color: \"black\", height: \"5%\", display: { xs: 'none', md: 'flex' } }}>\n                        { getAccountMenu(auth.loggedIn) }\n                    </Box>\n                </Toolbar>\n            </AppBar>\n            {\n                menu\n            }\n        </Box>\n    );\n        } else {\n            return null;\n        }\n}","/Users/mikeybudney/Desktop/CSE316FINALPROJECT/client/src/components/LoginScreen.js",["135","136","137"],"import { useContext } from 'react';\nimport AuthContext from '../auth'\nimport MUIErrorModal from './MUIErrorModal'\nimport Copyright from './Copyright'\n\nimport Avatar from '@mui/material/Avatar';\nimport Box from '@mui/material/Box';\nimport Button from '@mui/material/Button';\nimport Checkbox from '@mui/material/Checkbox';\nimport CssBaseline from '@mui/material/CssBaseline';\nimport FormControlLabel from '@mui/material/FormControlLabel';\nimport Grid from '@mui/material/Grid';\nimport Link from '@mui/material/Link';\nimport LockOutlinedIcon from '@mui/icons-material/LockOutlined';\nimport Paper from '@mui/material/Paper';\nimport TextField from '@mui/material/TextField';\nimport Typography from '@mui/material/Typography';\nimport GlobalStoreContext from '../store'\n\nexport default function LoginScreen() {\n    console.log(\"LOGIN SCREEN\");\n    const { auth } = useContext(AuthContext);\n    const { store } = useContext(GlobalStoreContext);\n\n    const handleSubmit = (event) => {\n        event.preventDefault();\n        const formData = new FormData(event.currentTarget);\n        auth.loginUser(\n            formData.get('email'),\n            formData.get('password')\n        );\n    };\n\n    let modalJSX = \"\";\n    console.log(auth);\n    if (auth.errorMessage !== null){\n        modalJSX = <MUIErrorModal />;\n    }\n    console.log(modalJSX);\n\n    return (\n        <Grid container component=\"main\" sx={{ height: '100vh' }}>\n            <CssBaseline />\n            <Grid\n                item\n                xs={false}\n                sm={4}\n                md={7}\n                sx={{\n                    backgroundImage: 'url(https://static.displate.com/857x1200/displate/2021-09-09/acaf2be9f58d1c05de9e4e47c580ee00_0da6a981d11a923cf24cf3f465fa81cc.jpg)',\n                    backgroundRepeat: 'no-repeat',\n                    backgroundColor: (t) =>\n                        t.palette.mode === 'light' ? t.palette.grey[50] : t.palette.grey[900],\n                    backgroundSize: 'cover',\n                    backgroundPosition: 'center',\n                }}\n            />\n            <Grid item xs={12} sm={8} md={5} component={Paper} elevation={6} square>\n                <Box\n                    sx={{\n                        my: 8,\n                        mx: 4,\n                        display: 'flex',\n                        flexDirection: 'column',\n                        alignItems: 'center',\n                    }}\n                >\n                    <Avatar sx={{ m: 1, bgcolor: 'secondary.main' }}>\n                        <LockOutlinedIcon/>\n                    </Avatar>\n                    <Typography component=\"h1\" variant=\"h5\">\n                        Sign in\n                    </Typography>\n                    <Box component=\"form\" noValidate onSubmit={handleSubmit} sx={{ mt: 1 }}>\n                        <TextField\n                            margin=\"normal\"\n                            required\n                            fullWidth\n                            id=\"email\"\n                            label=\"Email Address\"\n                            name=\"email\"\n                            autoComplete=\"email\"\n                            autoFocus\n                        />\n                        <TextField\n                            margin=\"normal\"\n                            required\n                            fullWidth\n                            name=\"password\"\n                            label=\"Password\"\n                            type=\"password\"\n                            id=\"password\"\n                            autoComplete=\"current-password\"\n                        />\n                        <Button\n                            type=\"submit\"\n                            fullWidth\n                            variant=\"contained\"\n                            sx={{ mt: 3, mb: 2 }}\n                        >\n                            Sign In\n                        </Button>\n                        <Grid container>\n                            <Grid item>\n                                <Link href=\"/register/\" variant=\"body2\">\n                                    Don't have an account? Sign Up\n                                </Link>\n                            </Grid>\n                        </Grid>\n                        <Copyright sx={{ mt: 5 }} />\n                    </Box>\n                </Box>\n            </Grid>\n            { modalJSX }\n        </Grid>\n    );\n}","/Users/mikeybudney/Desktop/CSE316FINALPROJECT/client/src/components/MUIDeleteModal.js",[],"/Users/mikeybudney/Desktop/CSE316FINALPROJECT/client/src/components/MUIEditSongModal.js",["138"],"import { useContext, useState } from 'react'\nimport GlobalStoreContext from '../store';\nimport * as React from 'react';\nimport Box from '@mui/material/Box';\nimport Modal from '@mui/material/Modal';\nimport Typography from '@mui/material/Typography';\nimport Button from '@mui/material/Button';\nimport Divider from '@mui/material/Divider';\n\nconst style1 = {\n    position: 'absolute',\n    top: '50%',\n    left: '50%',\n    transform: 'translate(-50%, -50%)',\n    width: 345,\n    height: 250,\n    backgroundSize: \"contain\",\n    backgroundImage: `url(https://i.insider.com/602ee9ced3ad27001837f2ac?})`,\n    border: '3px solid #000',\n    padding: '20px',\n    boxShadow: 24,\n};\n\nexport default function MUIEditSongModal() {\n    const { store } = useContext(GlobalStoreContext);\n    const [ title, setTitle ] = useState(store.currentSong.title);\n    const [ artist, setArtist ] = useState(store.currentSong.artist);\n    const [ youTubeId, setYouTubeId ] = useState(store.currentSong.youTubeId);\n\n    function handleConfirmEditSong(event) {\n        event.stopPropagation();\n        let newSongData = {\n            title: title,\n            artist: artist,\n            youTubeId: youTubeId\n        };\n        store.addUpdateSongTransaction(store.currentSongIndex, newSongData);        \n    }\n\n    function handleCancelEditSong(event) {\n        event.stopPropagation();\n        store.hideModals();\n    }\n\n    function handleUpdateTitle(event) {\n        event.stopPropagation();\n        setTitle(event.target.value);\n    }\n\n    function handleUpdateArtist(event) {\n        event.stopPropagation();\n        setArtist(event.target.value);\n    }\n\n    function handleUpdateYouTubeId(event) {\n        event.stopPropagation();\n        setYouTubeId(event.target.value);\n    }\n\n    return (\n        <Modal\n            open={store.currentModal == \"EDIT_SONG\"}\n        >\n        <Box sx={style1}>\n            <div id=\"edit-song-modal\" data-animation=\"slideInOutLeft\">\n            <Typography sx={{fontWeight: 'bold'}} id=\"modal-modal-title\" variant=\"h4\" component=\"h2\">\n                Edit Song\n            </Typography>\n            <Divider sx={{borderBottomWidth: 5, p: '5px', transform: 'translate(-5.5%, 0%)', width:377}}/>\n            <Typography sx={{mt: \"10px\", color: \"#702963\", fontWeight:\"bold\", fontSize:\"30px\"}} id=\"modal-modal-title\" variant=\"h6\" component=\"h2\">\n                Title: <input id=\"edit-song-modal-title-textfield\" className='modal-textfield' type=\"text\" defaultValue={title} onChange={handleUpdateTitle} />\n            </Typography>\n            <Typography sx={{color: \"#702963\", fontWeight:\"bold\", fontSize:\"30px\"}} id=\"modal-modal-artist\" variant=\"h6\" component=\"h2\">\n            Artist: <input id=\"edit-artist-modal-title-textfield\" className='modal-textfield' type=\"text\" defaultValue={artist} onChange={handleUpdateArtist} />\n            </Typography>\n            <Typography sx={{color: \"#702963\", fontWeight:\"bold\", fontSize:\"25px\"}} id=\"modal-modal-youTubeId\" variant=\"h6\" component=\"h2\">\n                YouTubeId: <input id=\"edit-artist-modal-youTubeId-textfield\" className='modal-textfield' type=\"text\" defaultValue={youTubeId} onChange={handleUpdateYouTubeId} />\n            </Typography>\n            <Button sx={{color: \"#8932CC\", backgroundColor: \"#CBC3E3\", fontSize: 13, fontWeight: 'bold', border: 2, p:\"5px\", mt:\"20px\"}} variant=\"outlined\" id=\"edit-song-confirm-button\" onClick={handleConfirmEditSong}>Confirm</Button>\n            <Button sx={{opacity: 0.80, color: \"#8932CC\", backgroundColor: \"#CBC3E3\", fontSize: 13, fontWeight: 'bold', border: 2, p:\"5px\", mt:\"20px\", ml:\"197px\"}} variant=\"outlined\" id=\"edit-song-confirm-button\" onClick={handleCancelEditSong}>Cancel</Button>\n            </div>\n        </Box>\n        </Modal>\n    );\n}","/Users/mikeybudney/Desktop/CSE316FINALPROJECT/client/src/components/MUIErrorModal.js",["139","140"],"import { useContext, useState } from 'react'\nimport GlobalStoreContext from '../store';\nimport * as React from 'react';\nimport Modal from '@mui/material/Modal';\nimport Alert from '@mui/material/Alert';\nimport Button from '@mui/material/Button';\nimport Box from '@mui/material/Box';\nimport AuthContext from '../auth'\n\nconst style = {\n    position: 'absolute',\n    top: '50%',\n    left: '50%',\n    transform: 'translate(-50%, -50%)',\n    height: 200,\n    width: 400,\n    border: '5px solid yellow',\n    fontSize: \"20px\",\n    p: 4\n};\n\n\nexport default function MUIErrorModal() {\n    const { store } = useContext(GlobalStoreContext);\n    const { auth } = useContext(AuthContext)\n\n    function handleCloseButton() {\n        store.hideModals();\n        console.log(\"CLOSE BUTTON CLICKED\");\n    }\n\n    return (\n        <Modal open = {auth.errorMessage !== null}>\n         <Alert sx={style} severity=\"warning\">{auth.errorMessage}\n         <Button sx={{color:\"black\", mt:\"20px\", ml:\"85px\", fontSize: 13, fontWeight: 'bold', border: 2}}variant=\"outlined\" onClick={handleCloseButton}>Close</Button>\n         </Alert>\n        </Modal>\n    );\n}","/Users/mikeybudney/Desktop/CSE316FINALPROJECT/client/src/components/MUIRemoveSongModal.js",["141"],"import { useContext } from 'react'\nimport GlobalStoreContext from '../store';\nimport * as React from 'react';\nimport Box from '@mui/material/Box';\nimport Modal from '@mui/material/Modal';\nimport Typography from '@mui/material/Typography';\nimport Button from '@mui/material/Button';\nimport Divider from '@mui/material/Divider';\n\nconst style1 = {\n    position: 'absolute',\n    top: '50%',\n    left: '50%',\n    transform: 'translate(-50%, -50%)',\n    width: 345,\n    height: 250,\n    backgroundSize: \"contain\",\n    backgroundImage: `url(https://i.insider.com/602ee9ced3ad27001837f2ac?})`,\n    border: '3px solid #000',\n    padding: '20px',\n    boxShadow: 24,\n};\n\nexport default function MUIRemoveSongModal() {\n    const { store } = useContext(GlobalStoreContext);\n\n    function handleConfirmRemoveSong (event) {\n        event.stopPropagation();\n        store.addRemoveSongTransaction();\n    }\n\n    function handleCancelRemoveSong (event) {\n        event.stopPropagation();\n        store.hideModals();\n    }\n    \n    let modalClass = \"modal\";\n    if (store.isRemoveSongModalOpen()) {\n        modalClass += \" is-visible\";\n    }\n    let songTitle = \"\";\n    if (store.currentSong) {\n        songTitle = store.currentSong.title;\n    }\n\n    return (\n        <Modal\n        open={store.currentModal === \"REMOVE_SONG\"}\n        aria-labelledby=\"modal-modal-title\"\n        aria-describedby=\"modal-modal-description\"\n        >\n        <Box sx={style1}>\n            <Typography sx={{fontWeight: 'bold'}} id=\"modal-modal-title\" variant=\"h4\" component=\"h2\">\n                Delete Song\n            </Typography>\n            <Divider sx={{borderBottomWidth: 5, p: '5px', transform: 'translate(-5.5%, 0%)', width:377}}/>\n            <Box sx={{background: \"rgb(172,79,198,0.05)\"}}>\n            <Typography id=\"modal-modal-description\" variant=\"h6\" sx={{color: \"#301974\" ,fontWeight: 'bold', mt: 1}}>\n                Are you sure you want to remove the <Typography display=\"inline\" id=\"modal-modal-description\" variant=\"h6\" sx={{color: \"#820747CF\" ,fontWeight: 'bold', mt: 2, textDecoration: 'underline'}}>{songTitle}</Typography> song?\n            </Typography>\n            </Box>\n            <Button sx={{opacity: 0.7, color: \"#8932CC\", backgroundColor: \"#CBC3E3\", fontSize: 13, fontWeight: 'bold', border: 2, p:\"5px\", mt:\"60px\", mr:\"95px\"}} variant=\"outlined\" onClick={handleConfirmRemoveSong}> Confirm </Button>\n            <Button sx={{opacity: 0.50, color: \"#8932CC\", backgroundColor: \"#CBC3E3\", fontSize: 13, fontWeight: 'bold', border: 2, p:\"5px\", mt:\"60px\", ml:\"102px\"}} variant=\"outlined\" onClick={handleCancelRemoveSong}> Cancel </Button>\n        </Box>\n    </Modal>\n    );\n}","/Users/mikeybudney/Desktop/CSE316FINALPROJECT/client/src/components/RegisterScreen.js",[],"/Users/mikeybudney/Desktop/CSE316FINALPROJECT/client/src/components/SongCard.js",["142"],"/Users/mikeybudney/Desktop/CSE316FINALPROJECT/client/src/components/SplashScreen.js",[],"/Users/mikeybudney/Desktop/CSE316FINALPROJECT/client/src/components/ListCard.js",["143","144","145"],"/Users/mikeybudney/Desktop/CSE316FINALPROJECT/client/src/components/Statusbar.js",["146"],"import { useContext } from 'react'\nimport AuthContext from '../auth'\nimport { GlobalStoreContext } from '../store'\n\n/*\n    Our Status bar React component goes at the bottom of our UI.\n    \n    @author McKilla Gorilla\n*/\n\n\n\nfunction Statusbar() {\n\n    function clickHandler() {\n        store.tryAcessingOtherAccountPlaylist();\n    }\n\n    const { auth } = useContext(AuthContext);\n    const { store } = useContext(GlobalStoreContext);\n    console.log(\"logged in: \" +  auth.loggedIn);\n    let text =\"\";\n    if (auth.loggedIn && store.currentList && null){\n        text = store.currentList.name;\n    return (\n        <div id=\"playlister-statusbar\">\n            {text}\n        </div>\n    );\n    }\n    return null;\n}\n/*<input type=\"button\" \nonClick={clickHandler} \nvalue='clickyclicky' />*/\n\nexport default Statusbar;","/Users/mikeybudney/Desktop/CSE316FINALPROJECT/client/src/components/HomeWrapper.js",[],"/Users/mikeybudney/Desktop/CSE316FINALPROJECT/client/src/components/HomeScreen.js",["147"],"import React, { useState, useContext, useEffect } from 'react'\nimport GlobalStoreContext from '../store'\nimport SortMenu from './SortMenu'\nimport ListCard from './ListCard.js'\nimport MUIDeleteModal from './MUIDeleteModal'\nimport HomeIcon from '@mui/icons-material/HomeOutlined';\nimport Person from '@mui/icons-material/PersonOutline';\nimport People from '@mui/icons-material/Groups';\nimport SearchBar from '@mui/material/TextField';\nimport Typography from '@mui/material/Typography';\nimport {Tabs, Tab} from '@mui/material';\nimport AddIcon from '@mui/icons-material/Add';\nimport Fab from '@mui/material/Fab'\nimport List from '@mui/material/List';\nimport ListItem from '@mui/material/ListItem';\nimport Box from '@mui/material/Box'\nimport AuthContext from '../auth'\nimport YouTubePlayer from './YoutubePlayer';\n/*\n    This React component lists all the top5 lists in the UI.\n    \n    @author McKilla Gorilla\n*/\nconst HomeScreen = () => {\n\n    const { store } = useContext(GlobalStoreContext);\n    const { auth } = useContext(AuthContext);\n\n\n    const [searchButtons, setSearchButtons] = useState(auth.user === \"guest\"? 2 : 1);\n    const [searchBar, setSearchBar] = useState({value: \"\"});\n\n    useEffect(() => {\n        console.log(auth.user);\n        if(auth.user !== \"guest\"){\n            console.log(\"GURGHRGHRUGRGURGRRUGHURG\");\n            store.myPlaylists(\"\");\n        }\n    }, []);\n\n    function handleCreateNewList() {\n        store.createNewList();\n    }\n    let listCard = <Box sx={{width:\"50%\"}}></Box>;\n    /*if(store){\n        if(store.searchBy === null){\n            listCard = \n<Fab sx={{height:\"100%\", width:\"50%\", bgcolor:\"transparent\"}} color=\"primary\"  aria-label=\"add\"  id=\"add-list-button\" onClick={handleCreateNewList}>\n    <AddIcon sx={{color:\"black\", fontSize:\"1000px\"}}/>\n</Fab>;\n        }\n    }*/\n    if (store) {\n        console.log(\"BFURIUGIUHHUGIRUHIRGIUHGRUIHGRUIHRHIUGR\" + store);\n        if(store.idNamePairs !== null && store.idNamePairs.length !== 0){\n        listCard = \n            <List sx={{bgcolor:\"#B8B8B8\", width: '50%', overflow: \"scroll\"}}>\n            {\n                store.idNamePairs.map((pair) => (\n                    <ListCard\n                        key={pair._id}\n                        idNamePair={pair}\n                        selected={false}\n                    />\n                ))\n                \n            }\n            </List>;\n        }\n    }\n\n    //COMMENTS\n    let comments = null;\n    if (store.playingList !== null){\n        comments = \n            <List sx={{transform:\"translate(0%,4%)\", width: '100%', height: \"550px\", overflow: \"scroll\"}}>\n            {\n                store.playingList.comments.map((c, index) => (\n                    <ListItem key = {index} sx={{mt:\"5px\"}}>\n                        <Box sx ={{borderRadius:\"5px\", width:\"100%\", bgcolor:\"#FFD117\"}}>\n                            <Typography sx={{ml:\"5px\", color:\"blue\", textDecoration:\"underline\"}}>{c.postedBy}</Typography>\n                            <Typography sx={{ml:\"5px\", fontSize:\"24px\", color:\"black\"}}>{c.comment}</Typography>\n                            \n                        </Box>\n                    </ListItem>\n                ))\n                \n            }\n            </List>\n    }\n    function handleAddComment(event) {\n        if(auth.user !== \"guest\"){\n        if(store.playingList !== null && store.playingList.published !== \"no\"){\n            console.log(event.target.value);\n            if(event.key === \"Enter\"){\n                store.addComment(event.target.value);\n                event.target.value=\"\";\n            }\n        } else {\n            event.target.value = \"FIRST SELECT A PUBLISHED PLAYLIST TO COMMENT ON!\";\n        }\n    } else {\n        event.target.value = \"GUESTS CANNOT COMMENT. LOGIN TO COMMENT.\";\n    }\n    }\n\n    //Tab stuff\n    const [value, setValue] = useState(0);\n\n    const handleTabs=(event, value)=>{\n        console.warn(value);\n        setValue(value);\n    }\n    \n    function handleHome(event) {\n        event.stopPropagation();\n        if(auth.user !== \"guest\"){\n        setSearchButtons(1);\n        searchBar.value = \"\";\n        console.log(\"search         \" + store.searchBy);\n        store.myPlaylists(\"\");\n        }\n    }\n\n    function handlePeople(event) {\n        event.stopPropagation();\n        setSearchButtons(2);\n        searchBar.value = \"\";\n        console.log(\"search         \" + store.searchBy);\n        if(store.searchBy === null || !store.searchBy){\n            store.allPlaylists(true, \"abcwir8374n02nf98234.5ng83rg;g';$%^&#(fksnhfismmznxi8310dk485hdnazl\");\n        }\n     }\n\n    function handlePerson(event) {\n        event.stopPropagation();\n        setSearchButtons(3);\n        searchBar.value = \"\";\n        console.log(\"search         \" + store.searchBy);\n        if(store.searchBy === null || store.searchBy){\n            store.allPlaylists(false, \"abcwir8374n02nf98234.5ng83rg;g';$%^&#(fksnhfismmznxi8310dk485hdnazl\");\n        }\n    }\n\n    function handleSearch(event){\n        setSearchBar(event.target);\n        if(event.key === \"Enter\" && event.target.value.length > 0){\n            console.log(store.searchBy);\n            if(store.searchBy !== null){\n                store.allPlaylists(store.searchBy, event.target.value);\n            } else {\n                store.myPlaylists(event.target.value);\n            }\n        }\n    }\n    let c = \"white\";\n    if(auth.user === \"guest\"){\n        c = \"grey\";\n    }\n    return (\n        <Box sx={{height:\"94%\", width: \"100%\", bgcolor:\"#B8B8B8\"}}>\n            <Box sx={{width:\"100%\", height:\"8%\"}}>\n                <HomeIcon onClick={handleHome} sx={{border:searchButtons === 1? 1: 0, mt:\"0.2%\", ml:\"1.1%\",fontSize:\"60px\", color:c}}></HomeIcon>\n                <People onClick={handlePeople} sx={{border:searchButtons === 2? 1: 0,ml:\"1%\", mt:\"0.2%\",fontSize:\"60px\", color:\"white\"}}></People>\n                <Person onClick={handlePerson} sx={{border:searchButtons === 3? 1: 0,ml:\"1%\", mt:\"0.2%\",fontSize:\"60px\", color:\"white\"}}></Person>\n                <SearchBar onKeyDown={handleSearch} sx={{ml:\"5%\", mt:\"0.5%\", bgcolor:\"white\", width:\"40%\", color:\"red\"}} label=\"Search\" variant=\"outlined\" />\n                <Box sx={{width:\"100%\", transform: \"translate(86%, -110%)\"}}>\n                    <Typography sx={{fontWeight:\"bold\", fontSize:\"30px\"}}>Sort By</Typography>\n                </Box>\n                <Box sx={{width:\"100%\", transform: \"translate(93%, -100%)\"}}>\n                    <SortMenu></SortMenu>\n                </Box>\n            </Box>\n            <Box sx={{ml:\"2%\", mr:\"2%\",  bgcolor:\"#B8B8B8\"}} >\n                <Box sx={{width:\"112vw\", height: \"75vh\", display: \"flex\", direction: \"column\"}}>\n                    {listCard}\n                    <Box sx={{height:\"6.5%\", width:\"40vw\", bgcolor:\"transparent\"}}>\n                        <Tabs onChange={handleTabs} value = {value}>\n                            <Tab sx={{bgcolor:\"#AAAAAA\", border:3, borderRadius:\"30%\"}} label='Player'/>\n                            <Tab sx={{bgcolor:\"#AAAAAA\",  border:3, borderRadius:\"30%\"}} label='Comments'/>\n                        </Tabs>\n                        <TabPanel value={value} index={0}>\n                            <Box sx={{width:\"100%\", transform:\"translate(0%,-5%)\"}} bgcolor=\"B8B8B8\">\n                                {YouTubePlayer()}\n                            </Box>\n                        </TabPanel>\n                        <TabPanel value={value} index={1}>\n                            <Box sx={{transform:\"translate(0%, -4.5%)\", height: \"668px\", width:\"100%\", borderRadius:\"5px\"}} bgcolor=\"#cdccff\"> \n                                {comments}\n                                <SearchBar sx={{transform:\"translate(2.5%, 60%)\", borderRadius:\"10px\", bgcolor:\"white\", width:\"95%\", color:\"red\"}} label=\"Add a Comment\" variant=\"outlined\" \n                                onKeyDown={handleAddComment} />\n                            </Box>\n                        </TabPanel>\n                    </Box>\n                </Box>\n                <MUIDeleteModal />\n            </Box>\n            <Box sx={{transform:\"translate(0%, -12%)\", height:\"125px\", bgcolor:\"#B8B8B8\"}}>\n                <Fab sx={{mt:\"1.5%\", ml:\"40%\", bgcolor:\"transparent\"}} color=\"primary\"  aria-label=\"add\"  id=\"add-list-button\" onClick={handleCreateNewList}>\n                    <AddIcon sx={{color:\"black\", fontSize:\"70px\"}}/>\n                </Fab>\n                <Typography sx={{fontSize:70, ml:\"40%\"}}>Your Lists</Typography>\n            </Box>\n        </Box>\n    );\n}\nexport default HomeScreen;\n\nfunction TabPanel(props){\n    const {children, value, index} = props;\n    return(\n    <div>\n        {\n            value===index  && (\n                <h1>{children}</h1>\n            )\n        }\n    </div>\n    )\n}","/Users/mikeybudney/Desktop/CSE316FINALPROJECT/client/src/transactions/CreateSong_Transaction.js",[],"/Users/mikeybudney/Desktop/CSE316FINALPROJECT/client/src/transactions/RemoveSong_Transaction.js",[],"/Users/mikeybudney/Desktop/CSE316FINALPROJECT/client/src/common/jsTPS.js",[],"/Users/mikeybudney/Desktop/CSE316FINALPROJECT/client/src/transactions/UpdateSong_Transaction.js",[],"/Users/mikeybudney/Desktop/CSE316FINALPROJECT/client/src/transactions/MoveSong_Transaction.js",[],"/Users/mikeybudney/Desktop/CSE316FINALPROJECT/client/src/auth/auth-request-api/index.js",[],"/Users/mikeybudney/Desktop/CSE316FINALPROJECT/client/src/store/store-request-api/index.js",[],"/Users/mikeybudney/Desktop/CSE316FINALPROJECT/client/src/components/Copyright.js",[],"/Users/mikeybudney/Desktop/CSE316FINALPROJECT/client/src/components/SortMenu.js",[],"/Users/mikeybudney/Desktop/CSE316FINALPROJECT/client/src/components/YoutubePlayer.js",[],{"ruleId":"148","replacedBy":"149"},{"ruleId":"150","replacedBy":"151"},{"ruleId":"152","severity":1,"message":"153","line":18,"column":12,"nodeType":"154","messageId":"155","endLine":18,"endColumn":17},{"ruleId":"156","severity":1,"message":"157","line":28,"column":8,"nodeType":"158","endLine":28,"endColumn":10,"suggestions":"159"},{"ruleId":"152","severity":1,"message":"160","line":425,"column":17,"nodeType":"154","messageId":"155","endLine":425,"endColumn":24},{"ruleId":"152","severity":1,"message":"161","line":14,"column":8,"nodeType":"154","messageId":"155","endLine":14,"endColumn":18},{"ruleId":"152","severity":1,"message":"153","line":18,"column":13,"nodeType":"154","messageId":"155","endLine":18,"endColumn":18},{"ruleId":"152","severity":1,"message":"162","line":9,"column":8,"nodeType":"154","messageId":"155","endLine":9,"endColumn":16},{"ruleId":"152","severity":1,"message":"163","line":11,"column":8,"nodeType":"154","messageId":"155","endLine":11,"endColumn":24},{"ruleId":"152","severity":1,"message":"153","line":23,"column":13,"nodeType":"154","messageId":"155","endLine":23,"endColumn":18},{"ruleId":"164","severity":1,"message":"165","line":62,"column":38,"nodeType":"166","messageId":"167","endLine":62,"endColumn":40},{"ruleId":"152","severity":1,"message":"168","line":1,"column":22,"nodeType":"154","messageId":"155","endLine":1,"endColumn":30},{"ruleId":"152","severity":1,"message":"169","line":7,"column":8,"nodeType":"154","messageId":"155","endLine":7,"endColumn":11},{"ruleId":"152","severity":1,"message":"170","line":39,"column":9,"nodeType":"154","messageId":"155","endLine":39,"endColumn":19},{"ruleId":"152","severity":1,"message":"171","line":7,"column":13,"nodeType":"154","messageId":"155","endLine":7,"endColumn":22},{"ruleId":"152","severity":1,"message":"172","line":69,"column":9,"nodeType":"154","messageId":"155","endLine":69,"endColumn":12},{"ruleId":"152","severity":1,"message":"173","line":122,"column":9,"nodeType":"154","messageId":"155","endLine":122,"endColumn":20},{"ruleId":"152","severity":1,"message":"174","line":126,"column":9,"nodeType":"154","messageId":"155","endLine":126,"endColumn":19},{"ruleId":"152","severity":1,"message":"175","line":15,"column":14,"nodeType":"154","messageId":"155","endLine":15,"endColumn":26},{"ruleId":"156","severity":1,"message":"176","line":39,"column":8,"nodeType":"158","endLine":39,"endColumn":10,"suggestions":"177"},"no-native-reassign",["178"],"no-negated-in-lhs",["179"],"no-unused-vars","'store' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'auth'. Either include it or remove the dependency array.","ArrayExpression",["180"],"'newList' is assigned a value but never used.","'Typography' is defined but never used.","'Checkbox' is defined but never used.","'FormControlLabel' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'useState' is defined but never used.","'Box' is defined but never used.","'modalClass' is assigned a value but never used.","'draggedTo' is assigned a value but never used.","'_id' is assigned a value but never used.","'selectClass' is assigned a value but never used.","'cardStatus' is assigned a value but never used.","'clickHandler' is defined but never used.","React Hook useEffect has missing dependencies: 'auth.user' and 'store'. Either include them or remove the dependency array.",["181"],"no-global-assign","no-unsafe-negation",{"desc":"182","fix":"183"},{"desc":"184","fix":"185"},"Update the dependencies array to be: [auth]",{"range":"186","text":"187"},"Update the dependencies array to be: [auth.user, store]",{"range":"188","text":"189"},[841,843],"[auth]",[1381,1383],"[auth.user, store]"]